<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Judastree]]></title>
  <subtitle><![CDATA[You are the pretty sunshine of my life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://judastree.github.io//"/>
  <updated>2015-08-09T05:58:03.000Z</updated>
  <id>http://judastree.github.io//</id>
  
  <author>
    <name><![CDATA[Judastree]]></name>
    <email><![CDATA[judastree@live.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[LeetCode:Longest Common Prefix]]></title>
    <link href="http://judastree.github.io/2015/08/09/LeetCode-Longest-Common-Prefix/"/>
    <id>http://judastree.github.io/2015/08/09/LeetCode-Longest-Common-Prefix/</id>
    <published>2015-08-09T05:52:02.000Z</published>
    <updated>2015-08-09T05:58:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>   <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">LeetCode:Longest Common Prefix</a></p>
<p>   找出一个字符串数组中所有元素的最长公共前缀。</p>
<h2 id="思路">思路</h2><p>   先找出这个数组中最短的字符串，然后再遍历数组比较这个最短字符串是否当前元素的前缀。<br>   如果是的话，比较下一个数组元素。<br>   如果不是的话，最短字符串截断最后一位再和当前数组数组元素比较，直到最短字符串长度为0.</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * <span class="doctag">@param</span> {string[]} strs
 * <span class="doctag">@return</span> {string}
 */</span>
<span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span><span class="params">(strs)</span> </span>{
    <span class="keyword">if</span>(strs.length===<span class="number">0</span>){
        <span class="keyword">return</span> <span class="string">""</span>;
    }
    <span class="keyword">var</span> shortestStr=strs[<span class="number">0</span>];
    <span class="comment">//找出最短的字符串</span>
    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>; i&lt;strs.length;i++){
        <span class="keyword">if</span>(strs[i].length&lt;shortestStr.length){
            shortestStr = strs[i]
        }
    }
    <span class="comment">//判断最短字符串是否是当前元素的前缀</span>
    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;strs.length;i++){
        <span class="keyword">while</span>(shortestStr.length&gt;<span class="number">0</span>) {
            <span class="keyword">if</span> (strs[i].indexOf(shortestStr) === <span class="number">0</span>) {
                <span class="keyword">break</span>;
            } <span class="keyword">else</span> {
                shortestStr = shortestStr.substring(<span class="number">0</span>,shortestStr.length-<span class="number">1</span>);
            }
        }
    }
    <span class="keyword">return</span> shortestStr;
};
</code></pre><h2 id="耗时">耗时</h2><p><img src="/images/longestcommonprefix.png" alt="Runtime"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p>   <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">LeetCode:Longest Comm]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Remove Nth Node from End of List]]></title>
    <link href="http://judastree.github.io/2015/08/07/LeetCode-Remove-Nth-from-end/"/>
    <id>http://judastree.github.io/2015/08/07/LeetCode-Remove-Nth-from-end/</id>
    <published>2015-08-07T01:07:42.000Z</published>
    <updated>2015-08-08T01:29:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="external">Remove Nth Node from End of List</a></p>
<p>把倒数第N个元素从链表中删除。</p>
<p>比如链表1-&gt;2-&gt;3-&gt;4-&gt;5,  把倒数第二个删除（n=2），返回1-&gt;2-&gt;3-&gt;5</p>
<h2 id="思路">思路</h2><p>首先是遍历整个链表，拿到链表的长度，然后根据这个长度值length和指定的n值再遍历一次链表，找到要删除节点的父节点。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * Definition for singly-linked list.
 */</span>
  function ListNode(val) {
      <span class="keyword">this</span>.val = val;
      <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">null</span>;
  }

<span class="comment">/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */</span>
var removeNthFromEnd = function(head, n) {
    var dumy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), p=head,length=<span class="number">0</span>;
    dumy.<span class="keyword">next</span> =head;
    <span class="comment">//获取链表长度</span>
    <span class="keyword">while</span>(p){
        length++;
        p = p.<span class="keyword">next</span>;
    }
    p = dumy;
    <span class="comment">//找到要删除元素的父元素</span>
    <span class="keyword">while</span>(length&gt;n){
        p = p.<span class="keyword">next</span>;
        length--;
    }
    <span class="comment">//删除元素</span>
    <span class="keyword">if</span>(p.<span class="keyword">next</span>){
        p.<span class="keyword">next</span> = p.<span class="keyword">next</span>.<span class="keyword">next</span>;
    }<span class="keyword">else</span>{
        p = <span class="keyword">null</span>;
    }
    <span class="keyword">return</span> dumy.<span class="keyword">next</span>;
};
</code></pre><h2 id="耗时">耗时</h2><p><img src="/images/removenthfromend.png" alt="removenthfromend"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="external">Remove Nth No]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode: Merge Sorted Array]]></title>
    <link href="http://judastree.github.io/2015/08/07/LeetCode-Merge-Sorted-Array/"/>
    <id>http://judastree.github.io/2015/08/07/LeetCode-Merge-Sorted-Array/</id>
    <published>2015-08-07T00:54:00.000Z</published>
    <updated>2015-08-08T01:30:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="external">Merge Sorted Array</a></p>
<p>把两个有序的数组合并成一个，数组1有m个元素，数组2有n个元素。假设数组1有足够的长度（m+n）来容纳数组1和数组2，求合并后的数组1.</p>
<h2 id="思路">思路</h2><p>因为不能用额外的存储空间，考虑用类似选择排序的方式来重新生成nums1.</p>
<p>即，原nums1的最大值和num2的最大值比较，大者放到新nums1[m+n-1]位置。<br>并且指针向前移一位，继续比较原nums1和num2的最大值，把大的放到新nums1[m+n-2]位置，直到一个数组的指针已经到头了。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */</span>
<span class="keyword">var</span> <span class="keyword">merge</span> = function(nums1, <span class="keyword">m</span>, nums2, <span class="keyword">n</span>) {

    <span class="keyword">var</span> k = 0,i= 0,j=0;

    <span class="keyword">if</span>(<span class="keyword">m</span>===0&amp;&amp;<span class="keyword">n</span>===0){
        nums1.length = 0;
        <span class="keyword">return</span> nums1;
    }
    <span class="keyword">if</span>(<span class="keyword">n</span>===0){
        nums1.length = <span class="keyword">m</span>;
        <span class="keyword">return</span> nums1;
    }
    <span class="keyword">if</span>(<span class="keyword">m</span>===0){
        <span class="keyword">for</span>(;i&lt;<span class="keyword">n</span>;i++){
            nums1[i] = nums2[i];
        }
        nums1.length=<span class="keyword">n</span>;
        <span class="keyword">return</span> nums1;
    }
    <span class="comment">//i指向原nums1中最大的数，j指向nums2中最大的数</span>
    <span class="keyword">while</span>(i&lt;<span class="keyword">m</span>&amp;&amp;j&lt;<span class="keyword">n</span>){
        <span class="comment">//把较大的数放在nums1[m+n-1-k]中</span>
        <span class="keyword">if</span>(nums1[<span class="keyword">m</span>-1-i]&gt;=nums2[<span class="keyword">n</span>-1-j]){
            nums1[<span class="keyword">m</span>+<span class="keyword">n</span>-1-k]  = nums1[<span class="keyword">m</span>-1-i];
            i++;
        }<span class="keyword">else</span>{
            nums1[<span class="keyword">m</span>+<span class="keyword">n</span>-1-k]  = nums2[<span class="keyword">n</span>-1-j];
            j++;
        }
        k++;
    }
    <span class="keyword">if</span>(i===<span class="keyword">m</span>){
        <span class="keyword">while</span>(j&lt;<span class="keyword">n</span>){
            nums1[<span class="keyword">m</span>+<span class="keyword">n</span>-1-k] = nums2[<span class="keyword">n</span>-1-j];
            j++;
            k++;
        }
    }
};
</code></pre><h2 id="耗时">耗时</h2><p> <img src="/images/mergesortedarray.png" alt="mergesortedarray"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="external">Merge Sorted Array</a></p>
]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Count and Say]]></title>
    <link href="http://judastree.github.io/2015/08/06/LeetCode-Count-and-Say/"/>
    <id>http://judastree.github.io/2015/08/06/LeetCode-Count-and-Say/</id>
    <published>2015-08-06T02:53:41.000Z</published>
    <updated>2015-08-06T03:01:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="external">Count And Say</a></p>
<p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …</p>
<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.</p>
<p>Note: The sequence of integers will be represented as a string.</p>
<h2 id="思路">思路</h2><p>递归的实现，找出CountAndSay(n)和CountAndSay(n-1)的关系。<br>比如1211拿一个数组记录下有多少个数组。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number} n
 * @return {string}
 */</span>
var countAndSay = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> {</span>
    <span class="keyword">if</span><span class="params">(n===<span class="number">0</span>)</span> return <span class="string">""</span>;
    <span class="keyword">if</span><span class="params">(n===<span class="number">1</span>)</span> return <span class="string">"1"</span>;
    <span class="keyword">if</span><span class="params">(n===<span class="number">2</span>)</span> return <span class="string">"11"</span>;

    var preStrArray = countAndSay<span class="params">(n-<span class="number">1</span>)</span>.split<span class="params">(<span class="string">""</span>)</span>;
    var tempArray=[];

    tempArray[<span class="number">0</span>] = <span class="number">1</span>;
    tempArray[<span class="number">1</span>] = preStrArray[<span class="number">0</span>];
    <span class="keyword">for</span><span class="params">(var i = <span class="number">1</span>; i&lt;preStrArray.length-<span class="number">1</span>;i++)</span>{
        <span class="keyword">if</span><span class="params">(preStrArray[i]!==preStrArray[i-<span class="number">1</span>])</span>{
            tempArray.push<span class="params">(<span class="number">1</span>)</span>;
            tempArray.push<span class="params">(preStrArray[i])</span>;
        }<span class="keyword">else</span>{
            tempArray[tempArray.length-<span class="number">2</span>]++;
        }
    }
    <span class="keyword">if</span><span class="params">(preStrArray[i]!==preStrArray[i-<span class="number">1</span>])</span>{
        tempArray.push<span class="params">(<span class="number">1</span>)</span>;
        tempArray.push<span class="params">(preStrArray[i])</span>;
    }<span class="keyword">else</span>{
        tempArray[tempArray.length-<span class="number">2</span>] ++;
    }
    return tempArray.toString<span class="params">()</span>.replace<span class="params">(/,/g,<span class="string">""</span>)</span>;
}
</code></pre><h2 id="耗时">耗时</h2><p><img src="/images/countandsay.png" alt="countandsay.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="external">Count And Say</a></p>
<p>The cou]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世界那么大翻墙出去看看]]></title>
    <link href="http://judastree.github.io/2015/08/05/%E4%B8%96%E7%95%8C%E9%82%A3%E4%B9%88%E5%A4%A7%E7%BF%BB%E5%A2%99%E5%87%BA%E5%8E%BB%E7%9C%8B%E7%9C%8B/"/>
    <id>http://judastree.github.io/2015/08/05/世界那么大翻墙出去看看/</id>
    <published>2015-08-05T02:31:28.000Z</published>
    <updated>2015-08-05T13:11:02.000Z</updated>
    <content type="html"><![CDATA[<p>一直用的红杏，前几天发现另外一个挺好用的翻墙方法，<a href="https://zqt.pw/" target="_blank" rel="external">最前台</a>的zpn。</p>
<p>现在还在内测阶段，需要申请账号。</p>
<p><img src="/images/zqtzhanghao.png" alt="zqtzhanghao"></p>
<h2 id="常见问题">常见问题</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&amp;mid=210884848&amp;idx=1&amp;sn=b9eb764ce37198723266c611f548a074#rd" target="_blank" rel="external">无法使用zpn？</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&amp;mid=210885311&amp;idx=1&amp;sn=7be955b972eae3fd0603b95b39f5a993#wechat_redirect" target="_blank" rel="external">启动边缘模式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直用的红杏，前几天发现另外一个挺好用的翻墙方法，<a href="https://zqt.pw/" target="_blank" rel="external">最前台</a>的zpn。</p>
<p>现在还在内测阶段，需要申请账号。</p>
<p><img src="/]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信、手Q、Qzone之x5内核inspect调试解决方案]]></title>
    <link href="http://judastree.github.io/2015/08/04/%E5%BE%AE%E4%BF%A1%E3%80%81%E6%89%8BQ%E3%80%81Qzone%E4%B9%8Bx5%E5%86%85%E6%A0%B8inspect%E8%B0%83%E8%AF%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://judastree.github.io/2015/08/04/微信、手Q、Qzone之x5内核inspect调试解决方案/</id>
    <published>2015-08-04T11:33:53.000Z</published>
    <updated>2015-08-04T11:36:34.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://bbs.mb.qq.com/thread-243399-1-1.html?pid=313743&amp;fid=93" target="_blank" rel="external">具体操作点这里</a></p>
<p>这个远程调试的方法和weinre类似，优势在于不用将调试脚本部署到线上，缺点就是只能安卓平台。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://bbs.mb.qq.com/thread-243399-1-1.html?pid=313743&amp;fid=93" target="_blank" rel="external">具体操作点这里</a></p>
<p>这个远程调试的方法和w]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Reverse Linked List]]></title>
    <link href="http://judastree.github.io/2015/08/04/LeetCode-Reverse-Linked-List/"/>
    <id>http://judastree.github.io/2015/08/04/LeetCode-Reverse-Linked-List/</id>
    <published>2015-08-04T02:40:27.000Z</published>
    <updated>2015-08-04T02:50:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目Topic">题目Topic</h2><p>反转链表<br><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="external">Reverse Linked List</a></p>
<h2 id="思路How_to">思路How to</h2><p>递归实现，先反转head后面的链表，这时原来的第二个节点(head-&gt;next)已经移到链尾了，把head赋给原来第二个节点的next，并以原head收尾，实现反转。</p>
<h2 id="实现_Implementation">实现 Implementation</h2><pre><code>/**
 * 递归实现
 * @param {ListNode} head
 * @<span class="keyword">return</span> {ListNode}
 */
var reverseList = <span class="function"><span class="keyword">function</span>(</span>head) {
    <span class="keyword">if</span>(head===<span class="literal">null</span>||head.<span class="keyword">next</span>===<span class="literal">null</span>){
        <span class="keyword">return</span> head;
    }<span class="keyword">else</span>{
        var newHead = reverseList(head.<span class="keyword">next</span>);
        head.<span class="keyword">next</span>.<span class="keyword">next</span> = head;
        head.<span class="keyword">next</span>=<span class="literal">null</span>;
        <span class="keyword">return</span> newHead;
    }
};
</code></pre><h2 id="耗时">耗时</h2><p><img src="/images/reverselist.png" alt="reverselist"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目Topic">题目Topic</h2><p>反转链表<br><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="external">Reverse ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Valid Anagram]]></title>
    <link href="http://judastree.github.io/2015/08/02/LeetCode-Valid-Anagram/"/>
    <id>http://judastree.github.io/2015/08/02/LeetCode-Valid-Anagram/</id>
    <published>2015-08-02T04:00:06.000Z</published>
    <updated>2015-08-02T04:19:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="external">Valid Anagram</a></p>
<p>判断两个字符串是否易位构造，也就是字母种类和出现的次数一样。</p>
<p>比如：</p>
<p>  dear   和  read<br>  listen 和  silent<br>  loop   和  pool</p>
<h2 id="思路">思路</h2><p>统计两个字符串的字母种类和出现的次数，如果相等则是易位构造。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * <span class="doctag">@param</span> {string} s
 * <span class="doctag">@param</span> {string} t
 * <span class="doctag">@return</span> {boolean}
 */</span>
<span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span><span class="params">(s, t)</span> </span>{
    <span class="comment">//判断两个字符串是否同源，也就是字母种类和出现的次数一样</span>
    <span class="keyword">var</span> sArray = s.split(<span class="string">""</span>),tArray= t.split(<span class="string">""</span>),sMap={};

    <span class="comment">//先判断s和t的长度是否相等</span>
    <span class="keyword">if</span>(s.length!== t.length){
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
    <span class="comment">//获取s字符串的字母种类和每个字母出现的次数</span>
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sArray.length;i++){
        <span class="keyword">if</span>(!sMap[sArray[i]]){
            sMap[sArray[i]] = <span class="number">1</span>;
        }<span class="keyword">else</span>{
            sMap[sArray[i]]++;
        }
    }

    <span class="comment">//根据sMap来判断t字符串是否和s同源</span>
    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tArray.length;i++){
        <span class="keyword">if</span>(sMap[tArray[i]]){
            sMap[tArray[i]]--;
            <span class="keyword">if</span>(sMap[tArray[i]]&lt;<span class="number">0</span>){
                <span class="keyword">return</span> <span class="keyword">false</span>;
            }
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
    }
    <span class="keyword">return</span> <span class="keyword">true</span>;
};
</code></pre><p>PS: 因为这个题目在leetcode上比较新，所以还没有出来JS运行时常的比较。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="external">Valid Anagram</a></p>
<p>判断两个字符串]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何有效利用碎片化的时间]]></title>
    <link href="http://judastree.github.io/2015/08/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A5%BD%E7%A2%8E%E7%89%87%E5%8C%96%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>http://judastree.github.io/2015/08/01/如何利用好碎片化的事件/</id>
    <published>2015-08-01T02:48:06.000Z</published>
    <updated>2015-08-01T03:03:06.000Z</updated>
    <content type="html"><![CDATA[<p>今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。</p>
<p><a href="http://www.zhihu.com/question/19562330/answer/48706421" target="_blank" rel="external">如何有效地利用碎片化的时间</a></p>
<p><strong>看了玉伯的回答顿时豁然开朗</strong></p>
<pre><code>尽量减少碎片时间。

对于无法减少的碎片时间，则好好感受天空、泥土与空气。
</code></pre><p>常常抱怨时间不够，要学习的东西太多而自己总是浪费在无意义的事情上，也常常抱怨和家人和朋友的相处太少，更会因为男朋友和自己聊天也不时刷微博的恼怒。</p>
<p>然后把自己陷入到烦恼自责的生活中，但其实这样不好。</p>
<p>不要给自己上发条，要找到乐趣，并享受之。</p>
<p>就像玉伯在签名一样，因上努力，果上随缘，这样不是更好么？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。</p>
<p><a href="http://www.zhihu.com/question/19562330/answer/48706421" target="_blank" rel="external">如何有效地]]>
    </summary>
    
      <category term="日常" scheme="http://judastree.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://judastree.github.io/2015/07/30/Debug-Grunt-in-Webstorm/"/>
    <id>http://judastree.github.io/2015/07/30/Debug-Grunt-in-Webstorm/</id>
    <published>2015-07-30T07:13:30.000Z</published>
    <updated>2015-07-30T07:13:30.000Z</updated>
    <content type="html"><![CDATA[<p>title: “Debug Grunt in Webstorm”<br>date: 2015-07-30 15:04:12</p>
<h2 id="tags:_[工具]">tags: [工具]</h2><h2 id="Steps">Steps</h2><p>  1 Run  -&gt;  Edit Configuration</p>
<p>  2 Press Add button (+)</p>
<p>  3 Type the configurations</p>
<p><img src="/images/gruntdebuginwebstorm.png" alt="gruntdebuginwebstorm"></p>
<p>  4 Set breakpoint where you want </p>
<p>  5 Press Shift+Ctrl+D to debug</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: “Debug Grunt in Webstorm”<br>date: 2015-07-30 15:04:12</p>
<h2 id="tags:_[工具]">tags: [工具]</h2><h2 id="Steps">Steps</h2><p>  1 Run ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[setWebChromeClient setWebviewClient的区别]]></title>
    <link href="http://judastree.github.io/2015/07/30/setWebChromeClient-setWebClient%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://judastree.github.io/2015/07/30/setWebChromeClient-setWebClient的区别/</id>
    <published>2015-07-30T06:23:10.000Z</published>
    <updated>2015-07-30T06:30:55.000Z</updated>
    <content type="html"><![CDATA[<p>webChromeClient 比webviewclient功能更强大，支持页面js。</p>
<p><a href="http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwebviewclient-vs-setwebchromeclient" target="_blank" rel="external">same question in stackoverflow</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>webChromeClient 比webviewclient功能更强大，支持页面js。</p>
<p><a href="http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwe]]>
    </summary>
    
      <category term="Android" scheme="http://judastree.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Excel Sheet Column Title]]></title>
    <link href="http://judastree.github.io/2015/07/30/LeetCode-Excel-Sheet-Column-Title/"/>
    <id>http://judastree.github.io/2015/07/30/LeetCode-Excel-Sheet-Column-Title/</id>
    <published>2015-07-30T02:34:14.000Z</published>
    <updated>2015-07-30T02:55:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">Excel Sheet Column Title</a></p>
<p>给定一个正数，求它在excel中对应的标头值。</p>
<pre><code><span class="number">1</span> <span class="subst">-&gt; </span>A
<span class="number">2</span> <span class="subst">-&gt; </span>B
<span class="number">3</span> <span class="subst">-&gt; </span>C
<span class="attribute">...</span>
<span class="number">26</span> <span class="subst">-&gt; </span>Z
<span class="number">27</span> <span class="subst">-&gt; </span>AA
<span class="number">28</span> <span class="subst">-&gt; </span>AB 
</code></pre><p>PS:Excel2003版之前最大是255列，2007版最大是16384列，当然这和题目无关。</p>
<h2 id="思路">思路</h2><p>这个题目其实是把十进制的数字转化成26进制。想到之前求一个数的二进制是通过不断除2的方式，这个也一样。</p>
<p>只要除以26之后得到商比26大就拿这商除26，并把每次除法的余数保存起来，直到商为0，将余数们反向输出就是26进制表达了。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number} n
 * @return {string}
 */</span>
<span class="keyword">var</span> convertToTitle = function(<span class="keyword">n</span>) {
     <span class="keyword">var</span> <span class="keyword">cs</span>=[];

    <span class="keyword">while</span>(<span class="keyword">n</span>&gt;26){
        <span class="keyword">if</span>(<span class="keyword">n</span>%26!==0){
             <span class="comment">//将余数对应的字母插入数组头部</span>
            <span class="keyword">cs</span>.unshift(String.fromCharCode(<span class="keyword">n</span>%26+64));
            <span class="keyword">n</span> = Math.<span class="literal">floor</span>(<span class="keyword">n</span> /26);
        }<span class="keyword">else</span>{
            <span class="comment">//如果刚好整除，那么商减1，余数为26</span>
            <span class="keyword">cs</span>.unshift(String.fromCharCode(90));
            <span class="keyword">n</span> = Math.<span class="literal">floor</span>(<span class="keyword">n</span> /26) -1;

        }
    }
    <span class="keyword">cs</span>.unshift(String.fromCharCode(<span class="keyword">n</span>+64));
    <span class="keyword">return</span> <span class="keyword">cs</span>.<span class="keyword">toString</span>().<span class="keyword">replace</span>(/\,/<span class="keyword">g</span>,<span class="string">""</span>);
};
</code></pre><p>   <img src="/images/excelcolumntotitle.png" alt="excelcolumntotile">    </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">Excel Sheet Column Ti]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Merge Two Sorted Lists]]></title>
    <link href="http://judastree.github.io/2015/07/29/LeetCode-Merge-Two-Sorted-Lists/"/>
    <id>http://judastree.github.io/2015/07/29/LeetCode-Merge-Two-Sorted-Lists/</id>
    <published>2015-07-29T02:31:25.000Z</published>
    <updated>2015-07-29T02:48:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>  <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted Lists</a></p>
<p>   有两个排序好的链表l1和l2，要求是合并为一个列表，并保持列表有序。</p>
<h2 id="思路">思路</h2><p>   我的想法是先遍历两个链表找到较短的一个，然后把短链表上节点逐个插入到长链表中。</p>
<p>   然后在网上看别人的代码，其实不用先找到短链。拿一个链表做基准，将另外一个插入就来，只遍历一次就好了。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */</span>
<span class="comment">/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */</span>
var mergeTwoLists = function(l1, l2) {
    <span class="comment">//定义指针</span>
    var sPointer = l1,lPointer = l2;

    <span class="comment">//一些特殊情况的处理</span>
    <span class="keyword">if</span>(sPointer&amp;&amp;sPointer.val&amp;&amp;lPointer&amp;&amp;lPointer.val===<span class="keyword">null</span>){
        <span class="keyword">return</span> sPointer;
    }
    <span class="keyword">if</span>(sPointer&amp;&amp;sPointer.val===<span class="keyword">null</span>&amp;&amp;lPointer&amp;&amp;lPointer.val){
        <span class="keyword">return</span> lPointer;
    }
    <span class="keyword">if</span>(sPointer&amp;&amp;!lPointer){
        <span class="keyword">return</span> sPointer;
    }
    <span class="keyword">if</span>(!sPointer&amp;&amp;lPointer){
        <span class="keyword">return</span> lPointer;
    }
    <span class="keyword">if</span>(!sPointer&amp;&amp;!lPointer){
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

     <span class="comment">//找到较短链表,逐个插入到长链表中</span>
    <span class="keyword">while</span>(sPointer){
        <span class="keyword">if</span>(!lPointer){ <span class="comment">//lpointer为null，说明l1&gt;l2</span>
            sPointer = l2;
            lPointer = l1;
            <span class="keyword">break</span>;
        }
        sPointer = sPointer.<span class="keyword">next</span>;
        lPointer = lPointer.<span class="keyword">next</span>;
    }
    <span class="keyword">if</span>(!sPointer){
        <span class="comment">//l1&lt;=l2</span>
        sPointer = l1;
        lPointer = l2;
    }

    <span class="comment">//为了保存插入节点previous的位置，创建一个dummy的节点</span>
    var dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);
    dummy.<span class="keyword">next</span> = lPointer;

    var prePointer = dummy;

    var insertnode = sPointer;
    <span class="keyword">while</span>(sPointer){
        <span class="keyword">if</span>(insertnode.val&lt;=lPointer.val){

            prePointer.<span class="keyword">next</span> = insertnode;
            sPointer = sPointer.<span class="keyword">next</span>;
            insertnode.<span class="keyword">next</span> = lPointer;
            <span class="comment">//短链的指针后移一位，长链不动</span>
            insertnode = sPointer;
            prePointer = prePointer.<span class="keyword">next</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">if</span>(!lPointer.<span class="keyword">next</span>){
                lPointer.<span class="keyword">next</span> = sPointer;
                <span class="keyword">break</span>;
            }
            <span class="comment">//长链后移一位，短链不动</span>
            prePointer =lPointer;
            lPointer = lPointer.<span class="keyword">next</span>;
        }


    }
    <span class="keyword">return</span> dummy.<span class="keyword">next</span>;
};
</code></pre><p>  <img src="/images/merge2sortedlists.png" alt="merge2sortedlists"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p>  <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted List]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[requirejs 的运行机制]]></title>
    <link href="http://judastree.github.io/2015/07/28/requirejs-%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://judastree.github.io/2015/07/28/requirejs-的运行机制/</id>
    <published>2015-07-28T09:06:25.000Z</published>
    <updated>2015-07-28T10:00:17.000Z</updated>
    <content type="html"><![CDATA[<p>在requirejs的官网找到这样一段话：<br>    RequireJS loads each dependency as a script tag, using head.appendChild().<br>    RequireJS waits for all dependencies to load, figures out the right order in which to call the functions that define the modules,<br>    then calls the module definition functions once the dependencies for those functions have been called. </p>
<p>翻译过来是：</p>
<pre><code>RequireJS通过head.<span class="function"><span class="title">appendChild</span><span class="params">()</span></span>将每一个依赖加载为一个script标签。

等到所有的依赖都加载完成之后，RequireJS计算出模块定义函数的调用顺序。

一旦依赖这些功能的地方被调用时requiredjs会调用这些功能的模块定义。
</code></pre><p><strong>requirejs是怎么做到模块化的？</strong> </p>
<p>requirejs有个loader来保存和监听所有依赖的状态。script标签来加载这些文件，加载成功和失败都会更新依赖的状态。</p>
<p><em>是否有重复引用?</em></p>
<p>Requirejs是单例的设计，只要同名的被引入过一次（这里的同名相当于amd define的id）就一直是用这个模块的定义。</p>
<p>为了避免全局污染，遵循AMD的规范，define和export。</p>
<p>理想状况下，每个加载的脚本都是通过define()来定义的一个模块；</p>
<p>但有些”浏览器全局变量注入”型的传统/遗留库并没有使用define()来定义它们的依赖关系，就必须为此使用shim config来指明它们的依赖关系。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在requirejs的官网找到这样一段话：<br>    RequireJS loads each dependency as a script tag, using head.appendChild().<br>    RequireJS waits for all de]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio Gradle Error:java.io.IOException: Operation not supported]]></title>
    <link href="http://judastree.github.io/2015/07/28/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported/"/>
    <id>http://judastree.github.io/2015/07/28/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported/</id>
    <published>2015-07-28T02:38:06.000Z</published>
    <updated>2015-07-28T02:41:42.000Z</updated>
    <content type="html"><![CDATA[<p>在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported</p>
<p>原因是我的代码放在了windows上共享给mac，gradle不支持远程</p>
<h2 id="参考">参考</h2><p><a href="http://stackoverflow.com/questions/28751793/android-studio-on-mac" target="_blank" rel="external">same problem in stackoverflow</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported</p>
<p>原因是我的代码放在了windows上共享给mac，gradle不支持远程</p>
<h2 id="参考">参考</]]>
    </summary>
    
      <category term="Android" scheme="http://judastree.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[style currentStyle getComputedStyle 三者区别]]></title>
    <link href="http://judastree.github.io/2015/07/27/style-currentStyle-getComputedStyle-%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <id>http://judastree.github.io/2015/07/27/style-currentStyle-getComputedStyle-三者区别/</id>
    <published>2015-07-27T11:58:26.000Z</published>
    <updated>2015-07-27T12:19:22.000Z</updated>
    <content type="html"><![CDATA[<p>JS中通过style来获取元素的样式有时并获取不到，为什么呢?</p>
<p>一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。</p>
<ul>
<li>内联样式: 写在标签内的样式，<div style=""></div></li>
<li>嵌入样式: 写在<html>和<head>之间，用<style></style>包住的样式</head></html></li>
<li>外联样式: 由<link>标签引入的外部css</li>
</ul>
<p>document.getElementById(“ID”).style 只可以获取到内嵌样式，也就是写在标签内style属性中定义的样式。</p>
<p>在IE下可以用<strong>currentStyle</strong>中获取其他样式,但在别的浏览器中不支持。</p>
<p>而火狐,chrome等可以通过getComputedStyle这个方法来获取所有计算过的样式。</p>
<pre><code>getComputedStyle<span class="list">(<span class="keyword">document</span>.getElementById<span class="list">(<span class="string">"ID"</span>)</span>)</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>JS中通过style来获取元素的样式有时并获取不到，为什么呢?</p>
<p>一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。</p>
<ul>
<li>内联样式: 写在标签内的样式，<div style=""></div></li>
<li>嵌入样式: 写在<h]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算Object的长度]]></title>
    <link href="http://judastree.github.io/2015/07/27/%E8%8E%B7%E5%8F%96object%E7%9A%84%E5%B1%9E%E6%80%A7%E9%95%BF%E5%BA%A6/"/>
    <id>http://judastree.github.io/2015/07/27/获取object的属性长度/</id>
    <published>2015-07-27T11:22:11.000Z</published>
    <updated>2015-07-27T11:40:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。</p>
<p>那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)</p>
<h2 id="思路">思路</h2><p>方法1:  Object中有hasOwnProperty()的方法，可以判断对象是否有某个特定的属性。<br>for-in 可以查找object的所有属性。而hasOwnProperty是判断本身对象的属性，不查找原型链的属性，这正好是我们要的。</p>
<p>方法2:  Object还有另外一个keys的方法，可以返回所有的keys。</p>
<h2 id="实现">实现</h2><p>方法1:</p>
<pre><code> var obj = {a:<span class="string">"1"</span>,b:<span class="string">"2"</span>,c:<span class="string">"3"</span>},<span class="property">length</span>=<span class="number">0</span>;

 <span class="keyword">for</span> (var <span class="keyword">property</span> <span class="keyword">in</span> obj) {
     <span class="keyword">if</span> (obj.hasOwnProperty(<span class="keyword">property</span>)) {
         <span class="property">length</span>++;
     }
 }

console.<span class="command">log</span>(<span class="property">length</span>);
</code></pre><p>方法2:</p>
<pre><code>var obj = {<span class="string">a:</span><span class="string">"1"</span>,<span class="string">b:</span><span class="string">"2"</span>,<span class="string">c:</span><span class="string">"3"</span>};       
console.log(Object.keys(obj).length);
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p>对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。</p>
<p>那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)</p>
<h2 id="思路">]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Isomorphic Strings]]></title>
    <link href="http://judastree.github.io/2015/07/27/LeetCode-Isomorphic-String/"/>
    <id>http://judastree.github.io/2015/07/27/LeetCode-Isomorphic-String/</id>
    <published>2015-07-27T02:26:51.000Z</published>
    <updated>2015-07-27T02:45:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="external">Isomorphic Strings</a></p>
<p>判断两个字符串是否为同型构造的字符串。</p>
<p>比如:</p>
<p>Given “egg”, “add”, return true.</p>
<p>Given “foo”, “bar”, return false.</p>
<p>Given “paper”, “title”, return true.</p>
<p>如果s字符串的字母被替换可以得到t字符串的话，则说明s和t字符串的构造是相同的。</p>
<h2 id="思路">思路</h2><p>按照同形构造的定义来，如果字母替换可以得到目标字符串，我们先建一个map来存储s和t/t和s字母的对应关系。<br>然后分别遍历s和t的字符串，只要出现当前字母和map表的字母不匹配的，就说明s和t不是同源的字母。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */</span>
<span class="keyword">var</span> isIsomorphic = function(s, t) {
    <span class="keyword">if</span>(s===t){
        <span class="keyword">return</span> <span class="literal">true</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">var</span> sArray= s.<span class="built_in">split</span>(<span class="string">""</span>),tArray = t.<span class="built_in">split</span>(<span class="string">""</span>);
        <span class="keyword">var</span> <span class="built_in">map</span> = {};

        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; sArray.length;i++){
            <span class="comment">//找出t和s 字母的匹配关系</span>
            <span class="keyword">if</span>(!<span class="built_in">map</span>[tArray[i]]){
                <span class="built_in">map</span>[tArray[i]] = sArray[i];
            }<span class="keyword">else</span>{
                <span class="comment">//如果当前字母和map中取出的字母不匹配，则返回false</span>
                <span class="keyword">if</span>(sArray[i]!==<span class="built_in">map</span>[tArray[i]]){
                    <span class="keyword">return</span> <span class="literal">false</span>;
                }
            }
        }
        <span class="comment">//清空map，反向查找匹配关系</span>
        <span class="built_in">map</span> ={};
        <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt; tArray.length;i++){
            <span class="comment">//找出s和t字母的匹配关系</span>
            <span class="keyword">if</span>(!<span class="built_in">map</span>[sArray[i]]){
                <span class="built_in">map</span>[sArray[i]] = tArray[i];
            }<span class="keyword">else</span> <span class="keyword">if</span>(tArray[i]!==<span class="built_in">map</span>[sArray[i]]){
                <span class="comment">//如果当前字母和map中取出的字母不匹配，则返回false</span>
                <span class="keyword">return</span> <span class="literal">false</span>;
            }

        }
        <span class="keyword">return</span> <span class="literal">true</span>;
    }
};
</code></pre><h2 id="结果">结果</h2><p><img src="/images/isomorphicstring.png" alt="isomorphicstrings"></p>
<h2 id="PS">PS</h2><p>一开始想的是replace的方法，但是后面验证出来发现输入的字符串有各种需要转义的特殊字符(*&amp;$’)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="external">Isomorphic Strings</a></p>
]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Number of 1 Bits]]></title>
    <link href="http://judastree.github.io/2015/07/26/LeetCode-Number-of-1-Bits/"/>
    <id>http://judastree.github.io/2015/07/26/LeetCode-Number-of-1-Bits/</id>
    <published>2015-07-26T04:36:48.000Z</published>
    <updated>2015-07-26T04:48:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p> <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">找出一个数字的二进制中有多少个1</a></p>
<p> 给定一个无符号的整型数字，比如11,它的二进制是1011,所以返回1的个数3.</p>
<h2 id="思路">思路</h2><p>对二进制进行位操作，每向右移1位和1做位与操作。是1的话计数器加1，直到右移到0截止。</p>
<p>这个方法写得很轻松，但是耗时长。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number} n - a positive integer
 * @return {number}
 */</span>
<span class="keyword">var</span> hammingWeight = function(<span class="keyword">n</span>,<span class="keyword">count</span>) {
    <span class="keyword">if</span>(!<span class="keyword">count</span>){
        <span class="keyword">count</span> = 0;
    }
    <span class="keyword">if</span>(<span class="keyword">n</span>&amp;1===1){
        <span class="keyword">count</span>++;
    }
    <span class="keyword">if</span>(<span class="keyword">n</span>&gt;1){
        <span class="keyword">return</span> hammingWeight(<span class="keyword">n</span>&gt;&gt;&gt;1,<span class="keyword">count</span>);
    }<span class="keyword">else</span>{
        <span class="keyword">return</span> <span class="keyword">count</span>;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p> <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">找出一个数字的二进制中有多少个1</a></p>
<p>]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Palindrome Linked List]]></title>
    <link href="http://judastree.github.io/2015/07/26/LeetCode-Palindrome-Linked-List/"/>
    <id>http://judastree.github.io/2015/07/26/LeetCode-Palindrome-Linked-List/</id>
    <published>2015-07-25T16:03:00.000Z</published>
    <updated>2015-07-26T04:35:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="external">Palindrome Linked List</a></p>
<p>判断一个单向链表（没有环）是否是回文链表。</p>
<p>要求时间复杂度在O(n),空间复杂度 O(1)</p>
<h2 id="思路">思路</h2><pre><code>1, 找到链表的中间节点。
2, 反转链表后半部分。
3, 比较前半部分和后半部分的值是否相等
4, 还原现场，将后半部分反转回原貌
</code></pre><h2 id="查到链表的中间节点">查到链表的中间节点</h2><pre><code>var fPointer = sPointer = midPos= head;
<span class="keyword">while</span> (fPointer.<span class="keyword">next</span>) {
    sPointer = sPointer.<span class="keyword">next</span>;
    fPointer = fPointer.<span class="keyword">next</span>;
    <span class="keyword">if</span>(fPointer.<span class="keyword">next</span>){
        fPointer = fPointer.<span class="keyword">next</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">break</span>;
    }
}
midPos = sPointer;
</code></pre><h2 id="反转链表">反转链表</h2><p>PS: 反转还没有写出来，下面是错误的。</p>
<p>  反转链表的方法是从第2个节点到第N个节点，依次逐节点插入到第1个节点(head节点)之后，最后将第一个节点挪到新表的表尾。</p>
<p>  我们此时的head是midPos,移动sPointer指针。</p>
<pre><code>fPointer = misPos;
sPointer = sPointer.<span class="keyword">next</span>;

<span class="keyword">while</span>(sPointer){
    <span class="regexp">//</span>暂时保存head.<span class="keyword">next</span>
    fPointer = midPos.<span class="keyword">next</span>;
    <span class="regexp">//</span>将要插入的节点放到head的<span class="keyword">next</span>
    midPos.<span class="keyword">next</span> = sPointer;
    <span class="regexp">//</span>将插入节点的<span class="keyword">next</span>赋值为前面保存的head.<span class="keyword">next</span>
    sPointer.<span class="keyword">next</span> = fPointer;

    <span class="regexp">//</span>移动sPointer
    sPointer = sPointer.<span class="keyword">next</span>   
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="external">Palindrome Linked List<]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Judastree]]></title>
  <subtitle><![CDATA[You are the pretty sunshine of my life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://judastree.github.io//"/>
  <updated>2015-08-01T03:03:06.000Z</updated>
  <id>http://judastree.github.io//</id>
  
  <author>
    <name><![CDATA[Judastree]]></name>
    <email><![CDATA[judastree@live.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何有效利用碎片化的时间]]></title>
    <link href="http://judastree.github.io/2015/08/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%A5%BD%E7%A2%8E%E7%89%87%E5%8C%96%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>http://judastree.github.io/2015/08/01/如何利用好碎片化的事件/</id>
    <published>2015-08-01T02:48:06.000Z</published>
    <updated>2015-08-01T03:03:06.000Z</updated>
    <content type="html"><![CDATA[<p>今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。</p>
<p><a href="http://www.zhihu.com/question/19562330/answer/48706421" target="_blank" rel="external">如何有效地利用碎片化的时间</a></p>
<p><strong>看了玉伯的回答顿时豁然开朗</strong></p>
<pre><code>尽量减少碎片时间。

对于无法减少的碎片时间，则好好感受天空、泥土与空气。
</code></pre><p>常常抱怨时间不够，要学习的东西太多而自己总是浪费在无意义的事情上，也常常抱怨和家人和朋友的相处太少，更会因为男朋友和自己聊天也不时刷微博的恼怒。</p>
<p>然后把自己陷入到烦恼自责的生活中，但其实这样不好。</p>
<p>不要给自己上发条，要找到乐趣，并享受之。</p>
<p>就像玉伯在签名一样，因上努力，果上随缘，这样不是更好么？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。</p>
<p><a href="http://www.zhihu.com/question/19562330/answer/48706421" target="_blank" rel="external">如何有效地]]>
    </summary>
    
      <category term="日常" scheme="http://judastree.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://judastree.github.io/2015/07/30/Debug-Grunt-in-Webstorm/"/>
    <id>http://judastree.github.io/2015/07/30/Debug-Grunt-in-Webstorm/</id>
    <published>2015-07-30T07:13:30.000Z</published>
    <updated>2015-07-30T07:13:30.000Z</updated>
    <content type="html"><![CDATA[<p>title: “Debug Grunt in Webstorm”<br>date: 2015-07-30 15:04:12</p>
<h2 id="tags:_[工具]">tags: [工具]</h2><h2 id="Steps">Steps</h2><p>  1 Run  -&gt;  Edit Configuration</p>
<p>  2 Press Add button (+)</p>
<p>  3 Type the configurations</p>
<p><img src="/images/gruntdebuginwebstorm.png" alt="gruntdebuginwebstorm"></p>
<p>  4 Set breakpoint where you want </p>
<p>  5 Press Shift+Ctrl+D to debug</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: “Debug Grunt in Webstorm”<br>date: 2015-07-30 15:04:12</p>
<h2 id="tags:_[工具]">tags: [工具]</h2><h2 id="Steps">Steps</h2><p>  1 Run ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[setWebChromeClient setWebviewClient的区别]]></title>
    <link href="http://judastree.github.io/2015/07/30/setWebChromeClient-setWebClient%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://judastree.github.io/2015/07/30/setWebChromeClient-setWebClient的区别/</id>
    <published>2015-07-30T06:23:10.000Z</published>
    <updated>2015-07-30T06:30:55.000Z</updated>
    <content type="html"><![CDATA[<p>webChromeClient 比webviewclient功能更强大，支持页面js。</p>
<p><a href="http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwebviewclient-vs-setwebchromeclient" target="_blank" rel="external">same question in stackoverflow</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>webChromeClient 比webviewclient功能更强大，支持页面js。</p>
<p><a href="http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwe]]>
    </summary>
    
      <category term="Android" scheme="http://judastree.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Excel Sheet Column Title]]></title>
    <link href="http://judastree.github.io/2015/07/30/LeetCode-Excel-Sheet-Column-Title/"/>
    <id>http://judastree.github.io/2015/07/30/LeetCode-Excel-Sheet-Column-Title/</id>
    <published>2015-07-30T02:34:14.000Z</published>
    <updated>2015-07-30T02:55:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">Excel Sheet Column Title</a></p>
<p>给定一个正数，求它在excel中对应的标头值。</p>
<pre><code><span class="number">1</span> <span class="subst">-&gt; </span>A
<span class="number">2</span> <span class="subst">-&gt; </span>B
<span class="number">3</span> <span class="subst">-&gt; </span>C
<span class="attribute">...</span>
<span class="number">26</span> <span class="subst">-&gt; </span>Z
<span class="number">27</span> <span class="subst">-&gt; </span>AA
<span class="number">28</span> <span class="subst">-&gt; </span>AB 
</code></pre><p>PS:Excel2003版之前最大是255列，2007版最大是16384列，当然这和题目无关。</p>
<h2 id="思路">思路</h2><p>这个题目其实是把十进制的数字转化成26进制。想到之前求一个数的二进制是通过不断除2的方式，这个也一样。</p>
<p>只要除以26之后得到商比26大就拿这商除26，并把每次除法的余数保存起来，直到商为0，将余数们反向输出就是26进制表达了。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number} n
 * @return {string}
 */</span>
<span class="keyword">var</span> convertToTitle = function(<span class="keyword">n</span>) {
     <span class="keyword">var</span> <span class="keyword">cs</span>=[];

    <span class="keyword">while</span>(<span class="keyword">n</span>&gt;26){
        <span class="keyword">if</span>(<span class="keyword">n</span>%26!==0){
             <span class="comment">//将余数对应的字母插入数组头部</span>
            <span class="keyword">cs</span>.unshift(String.fromCharCode(<span class="keyword">n</span>%26+64));
            <span class="keyword">n</span> = Math.<span class="literal">floor</span>(<span class="keyword">n</span> /26);
        }<span class="keyword">else</span>{
            <span class="comment">//如果刚好整除，那么商减1，余数为26</span>
            <span class="keyword">cs</span>.unshift(String.fromCharCode(90));
            <span class="keyword">n</span> = Math.<span class="literal">floor</span>(<span class="keyword">n</span> /26) -1;

        }
    }
    <span class="keyword">cs</span>.unshift(String.fromCharCode(<span class="keyword">n</span>+64));
    <span class="keyword">return</span> <span class="keyword">cs</span>.<span class="keyword">toString</span>().<span class="keyword">replace</span>(/\,/<span class="keyword">g</span>,<span class="string">""</span>);
};
</code></pre><p>   <img src="/images/excelcolumntotitle.png" alt="excelcolumntotile">    </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">Excel Sheet Column Ti]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Merge Two Sorted Lists]]></title>
    <link href="http://judastree.github.io/2015/07/29/LeetCode-Merge-Two-Sorted-Lists/"/>
    <id>http://judastree.github.io/2015/07/29/LeetCode-Merge-Two-Sorted-Lists/</id>
    <published>2015-07-29T02:31:25.000Z</published>
    <updated>2015-07-29T02:48:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>  <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted Lists</a></p>
<p>   有两个排序好的链表l1和l2，要求是合并为一个列表，并保持列表有序。</p>
<h2 id="思路">思路</h2><p>   我的想法是先遍历两个链表找到较短的一个，然后把短链表上节点逐个插入到长链表中。</p>
<p>   然后在网上看别人的代码，其实不用先找到短链。拿一个链表做基准，将另外一个插入就来，只遍历一次就好了。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */</span>
<span class="comment">/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */</span>
var mergeTwoLists = function(l1, l2) {
    <span class="comment">//定义指针</span>
    var sPointer = l1,lPointer = l2;

    <span class="comment">//一些特殊情况的处理</span>
    <span class="keyword">if</span>(sPointer&amp;&amp;sPointer.val&amp;&amp;lPointer&amp;&amp;lPointer.val===<span class="keyword">null</span>){
        <span class="keyword">return</span> sPointer;
    }
    <span class="keyword">if</span>(sPointer&amp;&amp;sPointer.val===<span class="keyword">null</span>&amp;&amp;lPointer&amp;&amp;lPointer.val){
        <span class="keyword">return</span> lPointer;
    }
    <span class="keyword">if</span>(sPointer&amp;&amp;!lPointer){
        <span class="keyword">return</span> sPointer;
    }
    <span class="keyword">if</span>(!sPointer&amp;&amp;lPointer){
        <span class="keyword">return</span> lPointer;
    }
    <span class="keyword">if</span>(!sPointer&amp;&amp;!lPointer){
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

     <span class="comment">//找到较短链表,逐个插入到长链表中</span>
    <span class="keyword">while</span>(sPointer){
        <span class="keyword">if</span>(!lPointer){ <span class="comment">//lpointer为null，说明l1&gt;l2</span>
            sPointer = l2;
            lPointer = l1;
            <span class="keyword">break</span>;
        }
        sPointer = sPointer.<span class="keyword">next</span>;
        lPointer = lPointer.<span class="keyword">next</span>;
    }
    <span class="keyword">if</span>(!sPointer){
        <span class="comment">//l1&lt;=l2</span>
        sPointer = l1;
        lPointer = l2;
    }

    <span class="comment">//为了保存插入节点previous的位置，创建一个dummy的节点</span>
    var dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);
    dummy.<span class="keyword">next</span> = lPointer;

    var prePointer = dummy;

    var insertnode = sPointer;
    <span class="keyword">while</span>(sPointer){
        <span class="keyword">if</span>(insertnode.val&lt;=lPointer.val){

            prePointer.<span class="keyword">next</span> = insertnode;
            sPointer = sPointer.<span class="keyword">next</span>;
            insertnode.<span class="keyword">next</span> = lPointer;
            <span class="comment">//短链的指针后移一位，长链不动</span>
            insertnode = sPointer;
            prePointer = prePointer.<span class="keyword">next</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">if</span>(!lPointer.<span class="keyword">next</span>){
                lPointer.<span class="keyword">next</span> = sPointer;
                <span class="keyword">break</span>;
            }
            <span class="comment">//长链后移一位，短链不动</span>
            prePointer =lPointer;
            lPointer = lPointer.<span class="keyword">next</span>;
        }


    }
    <span class="keyword">return</span> dummy.<span class="keyword">next</span>;
};
</code></pre><p>  <img src="/images/merge2sortedlists.png" alt="merge2sortedlists"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p>  <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted List]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[requirejs 的运行机制]]></title>
    <link href="http://judastree.github.io/2015/07/28/requirejs-%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://judastree.github.io/2015/07/28/requirejs-的运行机制/</id>
    <published>2015-07-28T09:06:25.000Z</published>
    <updated>2015-07-28T10:00:17.000Z</updated>
    <content type="html"><![CDATA[<p>在requirejs的官网找到这样一段话：<br>    RequireJS loads each dependency as a script tag, using head.appendChild().<br>    RequireJS waits for all dependencies to load, figures out the right order in which to call the functions that define the modules,<br>    then calls the module definition functions once the dependencies for those functions have been called. </p>
<p>翻译过来是：</p>
<pre><code>RequireJS通过head.<span class="function"><span class="title">appendChild</span><span class="params">()</span></span>将每一个依赖加载为一个script标签。

等到所有的依赖都加载完成之后，RequireJS计算出模块定义函数的调用顺序。

一旦依赖这些功能的地方被调用时requiredjs会调用这些功能的模块定义。
</code></pre><p><strong>requirejs是怎么做到模块化的？</strong> </p>
<p>requirejs有个loader来保存和监听所有依赖的状态。script标签来加载这些文件，加载成功和失败都会更新依赖的状态。</p>
<p><em>是否有重复引用?</em></p>
<p>Requirejs是单例的设计，只要同名的被引入过一次（这里的同名相当于amd define的id）就一直是用这个模块的定义。</p>
<p>为了避免全局污染，遵循AMD的规范，define和export。</p>
<p>理想状况下，每个加载的脚本都是通过define()来定义的一个模块；</p>
<p>但有些”浏览器全局变量注入”型的传统/遗留库并没有使用define()来定义它们的依赖关系，就必须为此使用shim config来指明它们的依赖关系。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在requirejs的官网找到这样一段话：<br>    RequireJS loads each dependency as a script tag, using head.appendChild().<br>    RequireJS waits for all de]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio Gradle Error:java.io.IOException: Operation not supported]]></title>
    <link href="http://judastree.github.io/2015/07/28/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported/"/>
    <id>http://judastree.github.io/2015/07/28/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported/</id>
    <published>2015-07-28T02:38:06.000Z</published>
    <updated>2015-07-28T02:41:42.000Z</updated>
    <content type="html"><![CDATA[<p>在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported</p>
<p>原因是我的代码放在了windows上共享给mac，gradle不支持远程</p>
<h2 id="参考">参考</h2><p><a href="http://stackoverflow.com/questions/28751793/android-studio-on-mac" target="_blank" rel="external">same problem in stackoverflow</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported</p>
<p>原因是我的代码放在了windows上共享给mac，gradle不支持远程</p>
<h2 id="参考">参考</]]>
    </summary>
    
      <category term="Android" scheme="http://judastree.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[style currentStyle getComputedStyle 三者区别]]></title>
    <link href="http://judastree.github.io/2015/07/27/style-currentStyle-getComputedStyle-%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <id>http://judastree.github.io/2015/07/27/style-currentStyle-getComputedStyle-三者区别/</id>
    <published>2015-07-27T11:58:26.000Z</published>
    <updated>2015-07-27T12:19:22.000Z</updated>
    <content type="html"><![CDATA[<p>JS中通过style来获取元素的样式有时并获取不到，为什么呢?</p>
<p>一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。</p>
<ul>
<li>内联样式: 写在标签内的样式，<div style=""></div></li>
<li>嵌入样式: 写在<html>和<head>之间，用<style></style>包住的样式</head></html></li>
<li>外联样式: 由<link>标签引入的外部css</li>
</ul>
<p>document.getElementById(“ID”).style 只可以获取到内嵌样式，也就是写在标签内style属性中定义的样式。</p>
<p>在IE下可以用<strong>currentStyle</strong>中获取其他样式,但在别的浏览器中不支持。</p>
<p>而火狐,chrome等可以通过getComputedStyle这个方法来获取所有计算过的样式。</p>
<pre><code>getComputedStyle<span class="list">(<span class="keyword">document</span>.getElementById<span class="list">(<span class="string">"ID"</span>)</span>)</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>JS中通过style来获取元素的样式有时并获取不到，为什么呢?</p>
<p>一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。</p>
<ul>
<li>内联样式: 写在标签内的样式，<div style=""></div></li>
<li>嵌入样式: 写在<h]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算Object的长度]]></title>
    <link href="http://judastree.github.io/2015/07/27/%E8%8E%B7%E5%8F%96object%E7%9A%84%E5%B1%9E%E6%80%A7%E9%95%BF%E5%BA%A6/"/>
    <id>http://judastree.github.io/2015/07/27/获取object的属性长度/</id>
    <published>2015-07-27T11:22:11.000Z</published>
    <updated>2015-07-27T11:40:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p>对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。</p>
<p>那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)</p>
<h2 id="思路">思路</h2><p>方法1:  Object中有hasOwnProperty()的方法，可以判断对象是否有某个特定的属性。<br>for-in 可以查找object的所有属性。而hasOwnProperty是判断本身对象的属性，不查找原型链的属性，这正好是我们要的。</p>
<p>方法2:  Object还有另外一个keys的方法，可以返回所有的keys。</p>
<h2 id="实现">实现</h2><p>方法1:</p>
<pre><code> var obj = {a:<span class="string">"1"</span>,b:<span class="string">"2"</span>,c:<span class="string">"3"</span>},<span class="property">length</span>=<span class="number">0</span>;

 <span class="keyword">for</span> (var <span class="keyword">property</span> <span class="keyword">in</span> obj) {
     <span class="keyword">if</span> (obj.hasOwnProperty(<span class="keyword">property</span>)) {
         <span class="property">length</span>++;
     }
 }

console.<span class="command">log</span>(<span class="property">length</span>);
</code></pre><p>方法2:</p>
<pre><code>var obj = {<span class="string">a:</span><span class="string">"1"</span>,<span class="string">b:</span><span class="string">"2"</span>,<span class="string">c:</span><span class="string">"3"</span>};       
console.log(Object.keys(obj).length);
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p>对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。</p>
<p>那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)</p>
<h2 id="思路">]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Isomorphic Strings]]></title>
    <link href="http://judastree.github.io/2015/07/27/LeetCode-Isomorphic-String/"/>
    <id>http://judastree.github.io/2015/07/27/LeetCode-Isomorphic-String/</id>
    <published>2015-07-27T02:26:51.000Z</published>
    <updated>2015-07-27T02:45:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="external">Isomorphic Strings</a></p>
<p>判断两个字符串是否为同型构造的字符串。</p>
<p>比如:</p>
<p>Given “egg”, “add”, return true.</p>
<p>Given “foo”, “bar”, return false.</p>
<p>Given “paper”, “title”, return true.</p>
<p>如果s字符串的字母被替换可以得到t字符串的话，则说明s和t字符串的构造是相同的。</p>
<h2 id="思路">思路</h2><p>按照同形构造的定义来，如果字母替换可以得到目标字符串，我们先建一个map来存储s和t/t和s字母的对应关系。<br>然后分别遍历s和t的字符串，只要出现当前字母和map表的字母不匹配的，就说明s和t不是同源的字母。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */</span>
<span class="keyword">var</span> isIsomorphic = function(s, t) {
    <span class="keyword">if</span>(s===t){
        <span class="keyword">return</span> <span class="literal">true</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">var</span> sArray= s.<span class="built_in">split</span>(<span class="string">""</span>),tArray = t.<span class="built_in">split</span>(<span class="string">""</span>);
        <span class="keyword">var</span> <span class="built_in">map</span> = {};

        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; sArray.length;i++){
            <span class="comment">//找出t和s 字母的匹配关系</span>
            <span class="keyword">if</span>(!<span class="built_in">map</span>[tArray[i]]){
                <span class="built_in">map</span>[tArray[i]] = sArray[i];
            }<span class="keyword">else</span>{
                <span class="comment">//如果当前字母和map中取出的字母不匹配，则返回false</span>
                <span class="keyword">if</span>(sArray[i]!==<span class="built_in">map</span>[tArray[i]]){
                    <span class="keyword">return</span> <span class="literal">false</span>;
                }
            }
        }
        <span class="comment">//清空map，反向查找匹配关系</span>
        <span class="built_in">map</span> ={};
        <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt; tArray.length;i++){
            <span class="comment">//找出s和t字母的匹配关系</span>
            <span class="keyword">if</span>(!<span class="built_in">map</span>[sArray[i]]){
                <span class="built_in">map</span>[sArray[i]] = tArray[i];
            }<span class="keyword">else</span> <span class="keyword">if</span>(tArray[i]!==<span class="built_in">map</span>[sArray[i]]){
                <span class="comment">//如果当前字母和map中取出的字母不匹配，则返回false</span>
                <span class="keyword">return</span> <span class="literal">false</span>;
            }

        }
        <span class="keyword">return</span> <span class="literal">true</span>;
    }
};
</code></pre><h2 id="结果">结果</h2><p><img src="/images/isomorphicstring.png" alt="isomorphicstrings"></p>
<h2 id="PS">PS</h2><p>一开始想的是replace的方法，但是后面验证出来发现输入的字符串有各种需要转义的特殊字符(*&amp;$’)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="external">Isomorphic Strings</a></p>
]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Number of 1 Bits]]></title>
    <link href="http://judastree.github.io/2015/07/26/LeetCode-Number-of-1-Bits/"/>
    <id>http://judastree.github.io/2015/07/26/LeetCode-Number-of-1-Bits/</id>
    <published>2015-07-26T04:36:48.000Z</published>
    <updated>2015-07-26T04:48:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p> <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">找出一个数字的二进制中有多少个1</a></p>
<p> 给定一个无符号的整型数字，比如11,它的二进制是1011,所以返回1的个数3.</p>
<h2 id="思路">思路</h2><p>对二进制进行位操作，每向右移1位和1做位与操作。是1的话计数器加1，直到右移到0截止。</p>
<p>这个方法写得很轻松，但是耗时长。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {number} n - a positive integer
 * @return {number}
 */</span>
<span class="keyword">var</span> hammingWeight = function(<span class="keyword">n</span>,<span class="keyword">count</span>) {
    <span class="keyword">if</span>(!<span class="keyword">count</span>){
        <span class="keyword">count</span> = 0;
    }
    <span class="keyword">if</span>(<span class="keyword">n</span>&amp;1===1){
        <span class="keyword">count</span>++;
    }
    <span class="keyword">if</span>(<span class="keyword">n</span>&gt;1){
        <span class="keyword">return</span> hammingWeight(<span class="keyword">n</span>&gt;&gt;&gt;1,<span class="keyword">count</span>);
    }<span class="keyword">else</span>{
        <span class="keyword">return</span> <span class="keyword">count</span>;
    }
};
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p> <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="external">找出一个数字的二进制中有多少个1</a></p>
<p>]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Palindrome Linked List]]></title>
    <link href="http://judastree.github.io/2015/07/26/LeetCode-Palindrome-Linked-List/"/>
    <id>http://judastree.github.io/2015/07/26/LeetCode-Palindrome-Linked-List/</id>
    <published>2015-07-25T16:03:00.000Z</published>
    <updated>2015-07-26T04:35:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="external">Palindrome Linked List</a></p>
<p>判断一个单向链表（没有环）是否是回文链表。</p>
<p>要求时间复杂度在O(n),空间复杂度 O(1)</p>
<h2 id="思路">思路</h2><pre><code>1, 找到链表的中间节点。
2, 反转链表后半部分。
3, 比较前半部分和后半部分的值是否相等
4, 还原现场，将后半部分反转回原貌
</code></pre><h2 id="查到链表的中间节点">查到链表的中间节点</h2><pre><code>var fPointer = sPointer = midPos= head;
<span class="keyword">while</span> (fPointer.<span class="keyword">next</span>) {
    sPointer = sPointer.<span class="keyword">next</span>;
    fPointer = fPointer.<span class="keyword">next</span>;
    <span class="keyword">if</span>(fPointer.<span class="keyword">next</span>){
        fPointer = fPointer.<span class="keyword">next</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">break</span>;
    }
}
midPos = sPointer;
</code></pre><h2 id="反转链表">反转链表</h2><p>PS: 反转还没有写出来，下面是错误的。</p>
<p>  反转链表的方法是从第2个节点到第N个节点，依次逐节点插入到第1个节点(head节点)之后，最后将第一个节点挪到新表的表尾。</p>
<p>  我们此时的head是midPos,移动sPointer指针。</p>
<pre><code>fPointer = misPos;
sPointer = sPointer.<span class="keyword">next</span>;

<span class="keyword">while</span>(sPointer){
    <span class="regexp">//</span>暂时保存head.<span class="keyword">next</span>
    fPointer = midPos.<span class="keyword">next</span>;
    <span class="regexp">//</span>将要插入的节点放到head的<span class="keyword">next</span>
    midPos.<span class="keyword">next</span> = sPointer;
    <span class="regexp">//</span>将插入节点的<span class="keyword">next</span>赋值为前面保存的head.<span class="keyword">next</span>
    sPointer.<span class="keyword">next</span> = fPointer;

    <span class="regexp">//</span>移动sPointer
    sPointer = sPointer.<span class="keyword">next</span>   
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="external">Palindrome Linked List<]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将数字转换为千分位的金额格式]]></title>
    <link href="http://judastree.github.io/2015/07/25/%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8D%83%E5%88%86%E4%BD%8D%E7%9A%84%E9%87%91%E9%A2%9D%E6%A0%BC%E5%BC%8F/"/>
    <id>http://judastree.github.io/2015/07/25/将数字转换为千分位的金额格式/</id>
    <published>2015-07-25T02:58:43.000Z</published>
    <updated>2015-07-25T03:55:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="实现">实现</h2><p>将一个数字转换为千分位的金额格式，找了酱一个正则表达式。</p>
<pre><code>var num =<span class="number">12345</span>;
console.<span class="built_in">log</span> <span class="params">(<span class="params">(num.toFixed<span class="params">(<span class="number">2</span>)</span> + '')</span>.replace<span class="params">(/\d{<span class="number">1</span>,<span class="number">3</span>}<span class="params">(?=<span class="params">(\d{<span class="number">3</span>})</span>+<span class="params">(\.\d*)</span>?$)</span>/g, '$&amp;,')</span>)</span>;
</code></pre><h2 id="解析">解析</h2><p> 一点点来看这个正则式什么意思。</p>
<p> <strong>toFixed(2)</strong> : 数字保留2位小数。</p>
<p> <strong>\d{1,3}</strong>    : 包含1个或者3个数字的字符串。（为简便表述，这个字符串先记做A）</p>
<p> <strong>\d{3}</strong>      : 包含3个数字</p>
<p> <strong>(\d{3})+</strong>   : 包含至少1个的3个数字的组合    </p>
<p> <strong>(.\d*)?$</strong>  : 以小数点以及其n位数字为结尾</p>
<p> <strong>(\d{3})+(.\d*)?$</strong>     : 小数点前至少1个3个数组，小数点后有n为数字的字符串（为简便表述，这个字符串先记做B）</p>
<p> <strong>?=(\d{3})+(.\d*)?$</strong>   : 找出任何其后紧接指定字符串B的字符串A</p>
<p> <strong> /g</strong>    : 全局匹配</p>
<p> <strong>$&amp;,</strong>     : 当前匹配的字符串，集合上面的，这个匹配字符串为A,并将A后面加个逗号“,”</p>
<p> 字面的意思就酱了。</p>
<h2 id="验证">验证</h2><p> 我们举几个例子来验证一下。</p>
<p> 假设num 是2位数或1位数，那么字符串B是为空的，不做逗号替换，直接返回;</p>
<p> num是3位数，则B = num，但是字符串A是空的，不做逗号替换，直接返回。</p>
<p> num是4,5位数，B是后三位，A是B前一位，找到这样的A，对A进行逗号替换。然后继续找，发现找不到了。</p>
<p> num是6位数，B = num， 找不到A，继续， B = num的后三位，找到A是B的前一位，加逗号。</p>
<p> num是7位数（1234567），B = num的后六位（234567），A是第一位（1），加逗号，此时结果为(1,234567).</p>
<p> 再继续查找，B是567，找到A是4，加逗号，结果为（1,234,567）.这就递归num是6为数的情况了。</p>
<p> 我们先找字符串B为345.00,然后找到2是满足字符串A的要求的。2后面加逗号。<br> g 继续找，发现没有了，结果是12,345.00;</p>
<p> 话说其实试验下来发现字符串A可以直接是<strong>\d{1}</strong></p>
<h2 id="PS：">PS：</h2><p>正则中$1,$2,$3,..$99,代表第1,2,3,…99匹配的字符串。</p>
<p>$’代表当前匹配字符串后面的字符串。<br>$`代表当前匹配字符串前面的字符串。</p>
<p>比如字符串“Hello,World”， 匹配字符串为”,”的话，$`代表“Hello”,$’代表“World”</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="实现">实现</h2><p>将一个数字转换为千分位的金额格式，找了酱一个正则表达式。</p>
<pre><code>var num =<span class="number">12345</span>;
console.<span class="built_in"]]>
    </summary>
    
      <category term="正则" scheme="http://judastree.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Darling，我想去死]]></title>
    <link href="http://judastree.github.io/2015/07/24/Darling,%E6%88%91%E5%A5%BD%E6%83%B3%E5%8E%BB%E6%AD%BB/"/>
    <id>http://judastree.github.io/2015/07/24/Darling,我好想去死/</id>
    <published>2015-07-24T03:33:36.000Z</published>
    <updated>2015-07-24T03:41:38.000Z</updated>
    <content type="html"><![CDATA[<p>过马路，我对男朋友说，“Darling,我好想去死~”</p>
<p>男朋友拉着我的手：“让我先砍掉你的一条腿好不好？”。</p>
<p>…</p>
<p>早上出门去上班，我磨磨蹭蹭走得很慢，嘴上嘟哝：“Darling，我好想去死~”</p>
<p>“让我先砍掉你的一条腿好不好?”</p>
<p>“为什么你那么执着于砍掉我的腿？”</p>
<p>“没为什么，我就是想砍掉你的一条腿。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>过马路，我对男朋友说，“Darling,我好想去死~”</p>
<p>男朋友拉着我的手：“让我先砍掉你的一条腿好不好？”。</p>
<p>…</p>
<p>早上出门去上班，我磨磨蹭蹭走得很慢，嘴上嘟哝：“Darling，我好想去死~”</p>
<p>“让我先砍掉你的一条腿好]]>
    </summary>
    
      <category term="日常" scheme="http://judastree.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Intersection of Two Linked Lists]]></title>
    <link href="http://judastree.github.io/2015/07/24/LeetCode-Intersection-of-Two-Linked-Lists/"/>
    <id>http://judastree.github.io/2015/07/24/LeetCode-Intersection-of-Two-Linked-Lists/</id>
    <published>2015-07-24T02:47:40.000Z</published>
    <updated>2015-07-24T03:08:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="external">查找两个链表相同的尾链</a></p>
<pre><code>A:          <span class="literal">a1</span> → <span class="literal">a2</span>
                   ↘
                     <span class="literal">c1</span> → <span class="literal">c2</span> → <span class="literal">c3</span>
                   ↗            
<span class="keyword">B: </span>    <span class="keyword">b1 </span>→ <span class="keyword">b2 </span>→ <span class="keyword">b3</span>
</code></pre><p> <em>如果两个链表没有相同尾链，返回null。
 </em>两个链表在输出时应保持原来的结构。<br> <em>链表结构中没有循环。
 </em>时间复杂度要求O(n),空间复杂度要求O(1)</p>
<h2 id="思路">思路</h2><p> 先取A，B链的长度，找出哪个是短链，哪个是长链。</p>
<p> 然后找到长链尾部和短链长度相同的位置，开始比较它和短链是否相等。</p>
<p> 如果当前节点不相等，则两者后移一位继续比较，直到找到第一个相等的节点，记录之。</p>
<p> 如果当前节点不相等，但前一个节点相等，说明没有相同的尾链，返回null。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */</span>
var <span class="variable">getIntersectionNode =</span> function(headA, headB) {

    <span class="keyword">if</span>(headA&amp;&amp;headB){
        var <span class="variable">node=</span>headA,<span class="variable">aLength=</span><span class="number">1</span>,<span class="variable">bLength=</span><span class="number">1</span>;
        while(node.next){
            aLength++;
            <span class="variable">node =</span> node.next;
        }
        <span class="variable">node=</span> headB;
        while(node.next){
            bLength++;
            <span class="variable">node=</span>node.next;
        }
        var pointer1 ,pointer2;
        //将ab链截取到尾部位数相同
        <span class="keyword">if</span>(aLength &gt; bLength){
            <span class="variable">pointer1 =</span> headB;
            <span class="variable">pointer2 =</span> headA;
            for(var <span class="variable">i =</span> bLength;i&lt;aLength;i++){
                <span class="variable">pointer2 =</span> pointer2.next;
            }
        }<span class="keyword">else</span> <span class="keyword">if</span>(aLength&lt;bLength){
            <span class="variable">pointer1 =</span> headA;
            <span class="variable">pointer2 =</span> headB;
            for(<span class="variable">i =</span> aLength;i&lt;bLength;i++){
                <span class="variable">pointer2 =</span> pointer2.next;
            }
        }<span class="keyword">else</span>{
            <span class="variable">pointer1 =</span> headA;
            <span class="variable">pointer2 =</span> headB;
        }

        <span class="variable">node =</span> <span class="constant">null</span>;
        //保留上次比较结果
        var <span class="variable">sameFlag =</span> <span class="constant">false</span>;
        while(pointer1){

            <span class="keyword">if</span>(pointer1.<span class="variable">val=</span>==pointer2.val){
                //当前相等，继续比较。
                // 如果上次比较不相等，则赋值node，说明是第一个相等的节点
                <span class="keyword">if</span>(!sameFlag){
                    <span class="variable">node =</span> pointer1;
                }
                <span class="variable">sameFlag=</span><span class="constant">true</span>;
                <span class="variable">pointer1 =</span> pointer1.next;
                <span class="variable">pointer2 =</span> pointer2.next;
                continue;

            }
            <span class="keyword">if</span>(pointer1.val!==pointer2.val){
                //当前不相等，判断上次比较是否相等。
                <span class="keyword">if</span>(sameFlag){
                    //上次比较相等，则直接返回<span class="constant">null</span>，说明没有相同的尾链
                    return <span class="constant">null</span>;
                }<span class="keyword">else</span>{
                    //上次比较不相等，则继续比较
                    <span class="variable">pointer1 =</span> pointer1.next;
                    <span class="variable">pointer2 =</span> pointer2.next;
                    <span class="variable">sameFlag=</span><span class="constant">false</span>;
                    continue;
                }

            }
        }
        return node;

    }<span class="keyword">else</span>{
        return <span class="constant">null</span>;
    }
};
</code></pre><p> <img src="/images/intersection.png" alt="intersection"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="external">查找两个链表相同的尾链</]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[页面性能分析工具]]></title>
    <link href="http://judastree.github.io/2015/07/23/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://judastree.github.io/2015/07/23/页面性能分析工具/</id>
    <published>2015-07-23T14:09:38.000Z</published>
    <updated>2015-07-23T14:26:10.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Google Page Speed Insights</a></p>
<p><a href="http://www.webpagetest.org/" target="_blank" rel="external">webpagetest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Google Page Speed Insights</a></p>
<p><a]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Rotate Array ]]></title>
    <link href="http://judastree.github.io/2015/07/23/LeetCode-Rotate-Array/"/>
    <id>http://judastree.github.io/2015/07/23/LeetCode-Rotate-Array/</id>
    <published>2015-07-23T03:12:43.000Z</published>
    <updated>2015-07-23T03:24:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">数组向右移K位</a></p>
<p> 有一个数组[1,2,3,4,5],向右移k位，k=3输出[3,4,5,1,2],k=1输出[5,1,2,3,4]</p>
<p> 要求时间复杂度线性，空间复杂度可控O(1)</p>
<h2 id="思路">思路</h2><p>找到每个元素移位后的位置，在新的数组上追一赋值。</p>
<pre><code>/**
 * @param {number[]} nums
 * @param {number} k
 * @<span class="keyword">return</span> {<span class="type">void</span>} <span class="type">Do</span> <span class="keyword">not</span> <span class="keyword">return</span> anything, modify nums <span class="keyword">in</span>-place instead.
 */
<span class="keyword">var</span> rotate = function(nums, k) {
      //步数是长度的倍数则直接返回
      <span class="keyword">if</span>(k%nums.length===<span class="number">0</span>){
        <span class="keyword">return</span>;
    }<span class="keyword">else</span>{
        //取模，拿到真正的步数，因为k可能大于length
        <span class="keyword">var</span> step = k%nums.length;
        <span class="keyword">var</span> <span class="literal">result</span> = [];
        <span class="literal">result</span>.length =nums.length;

        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++){
            //确定每个元素的新的位置
            <span class="literal">result</span>[(i+step)%nums.length] = nums[i]
        }
        //重新赋值
        <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;nums.length;i++){
            nums[i] = <span class="literal">result</span>[i];
        }

    }
};
</code></pre><p>PS：验证虽然通过了，但总感觉有点投机，因为我重新复制了一下这个数组。虽然只用了这一个额外变量，但从空间存储上还是O(n)的。</p>
<p><img src="/images/rotatearray.png" alt="RotateArray"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">数组向右移K位</a></p>
<p> 有一个数组[1,]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Maximum Depth of Binary Tree]]></title>
    <link href="http://judastree.github.io/2015/07/23/LeetCode-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://judastree.github.io/2015/07/23/LeetCode-Maximum-Depth-of-Binary-Tree/</id>
    <published>2015-07-23T02:37:29.000Z</published>
    <updated>2015-07-23T02:44:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">查找二叉树的最大深度</a></p>
<h2 id="思路">思路</h2><p>二叉树的最大深度，等于根节点的深度。根节点的深度等于左子树和右子树深度的较大者。</p>
<p>所以这个题可以递归遍历每一个节点的深度。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */</span>
<span class="comment">/**
 * <span class="doctag">@param</span> {TreeNode} root
 * <span class="doctag">@return</span> {number}
 */</span>
<span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span><span class="params">(root)</span> </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">findDepth</span><span class="params">(node,currentDepth)</span></span>{
        <span class="keyword">if</span>(node!==<span class="keyword">null</span>){
            currentDepth++;
            <span class="comment">//每个节点的深度，等于左深度和右深度的较大者</span>
            <span class="keyword">var</span> leftDepth =  findDepth(node.left,currentDepth);
            <span class="keyword">var</span> rightDepth = findDepth(node.right,currentDepth);
            <span class="keyword">return</span> leftDepth&gt;rightDepth?leftDepth:rightDepth;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> currentDepth;
        }
    }
    <span class="comment">//返回根节点的深度</span>
    <span class="keyword">return</span> findDepth(root,<span class="number">0</span>);
};
</code></pre><p><img src="/images/maxdepth.png" alt="MaxDepth">        </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">查找二叉树的最大深度</a]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Plus One]]></title>
    <link href="http://judastree.github.io/2015/07/22/LeetCode-Plus-One/"/>
    <id>http://judastree.github.io/2015/07/22/LeetCode-Plus-One/</id>
    <published>2015-07-22T03:17:26.000Z</published>
    <updated>2015-07-22T03:27:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="external">Plus One</a></p>
<p>有一个数组代表一个非负的数字，求这个数字+1之后的数组。<br>比如这个数组是[1,2,3,4]它代表数字1234，那么这个数字加1之后是1235。希望得到这个数字代表的数组[1,2,3,5]</p>
<h2 id="思路">思路</h2><p>从最后一位开始，对当前值+1，如果当前值不为9则正常返回结果。如果当前值为9，则当前值变为0，再递归调用前一位的+1操作。</p>
<h2 id="实现">实现</h2><pre><code>/**
 * @param {<span class="keyword">number</span>[]} <span class="built_in">digits</span>
 * @<span class="keyword">return</span> {<span class="keyword">number</span>[]}
 */
var plusOne = <span class="function"><span class="keyword">function</span><span class="params">(digits)</span></span> {
    <span class="function"><span class="keyword">function</span></span> plus(<span class="built_in">digits</span>,i){
        <span class="keyword">if</span>(<span class="built_in">digits</span>[i]===<span class="number">9</span>){
            <span class="built_in">digits</span>[i]=<span class="number">0</span>;
            <span class="keyword">if</span>(i===<span class="number">0</span>){
                var head = [<span class="number">1</span>];
                <span class="keyword">return</span> head.concat(<span class="built_in">digits</span>);
            }<span class="keyword">else</span>{
                <span class="keyword">return</span> plus(<span class="built_in">digits</span>,i-<span class="number">1</span>);
            }

        }<span class="keyword">else</span>{
            <span class="built_in">digits</span>[i] = <span class="built_in">digits</span>[i]+<span class="number">1</span>;
            <span class="keyword">return</span> <span class="built_in">digits</span>;
        }

    }
    <span class="keyword">return</span> plus(<span class="built_in">digits</span>,<span class="built_in">digits</span>.length-<span class="number">1</span>);
};
</code></pre><p>PS：上面的代码性能不是很好，肯定有更好的算法的。</p>
<p> <img src="/images/plusone.png" alt="PlusOneRuntime">     </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="external">Plus One</a></p>
<p>有一个数组代表一个非负的数]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Single Number]]></title>
    <link href="http://judastree.github.io/2015/07/22/LeetCode-Single-Number/"/>
    <id>http://judastree.github.io/2015/07/22/LeetCode-Single-Number/</id>
    <published>2015-07-22T02:58:33.000Z</published>
    <updated>2015-07-22T03:14:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">找出落单的数字</a></p>
<p>有一个都是整型的数组，它除了一个元素只有出现一次之外，其他的都出现了二次。求这个落单的数字。</p>
<p>比如[1,2,3,5,2,1,3]这个数组中5是落单的数字，其他数字都出现了两次。</p>
<h2 id="思路">思路</h2><p>最先写的是两层for循环来比较是否有相等的。但是提交之后发现Time Limit Exceeded，时间复杂度是n^2。</p>
<p>题目有标注是线性的事件复杂度，而且空间复杂度也是线性级别的,所以递归调用也是不行的。</p>
<p>然后百度了下，发现有人用异或操作来判断。</p>
<pre><code><span class="tag">a</span> ^ <span class="tag">b</span> = <span class="tag">b</span> ^ <span class="tag">a</span>
<span class="tag">a</span> ^ <span class="tag">a</span> = <span class="number">0</span>
<span class="number">0</span> ^ <span class="tag">a</span> = <span class="tag">a</span>

<span class="tag">a</span> ^ <span class="tag">b</span> ^ <span class="tag">a</span> = <span class="tag">a</span> ^ <span class="tag">a</span> ^ <span class="tag">b</span> = <span class="number">0</span> ^ <span class="tag">b</span> = b
</code></pre><p> 这样就可以把这个b找出来了。</p>
<h2 id="实现">实现</h2><pre><code>/**
 * @param {number[]} nums
 * @<span class="keyword">return</span> {number}
 */
<span class="keyword">var</span> singleNumber = function(nums) {
    <span class="keyword">var</span> <span class="literal">result</span> = nums[<span class="number">0</span>];

    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length; i++){
        <span class="literal">result</span> = <span class="literal">result</span> ^ nums[i];
    }
    <span class="keyword">return</span> <span class="literal">result</span>;

}
</code></pre><p> <img src="/images/singlenumber.png" alt="SingleNumberRuntime">      </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">找出落单的数字</a></p>
<p>有一个都是整型的数]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
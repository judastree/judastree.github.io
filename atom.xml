<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Judastree]]></title>
  <subtitle><![CDATA[You are the pretty sunshine of my life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://judastree.github.io//"/>
  <updated>2015-07-23T14:26:10.000Z</updated>
  <id>http://judastree.github.io//</id>
  
  <author>
    <name><![CDATA[Judastree]]></name>
    <email><![CDATA[judastree@live.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[页面性能分析工具]]></title>
    <link href="http://judastree.github.io/2015/07/23/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://judastree.github.io/2015/07/23/页面性能分析工具/</id>
    <published>2015-07-23T14:09:38.000Z</published>
    <updated>2015-07-23T14:26:10.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Google Page Speed Insights</a></p>
<p><a href="http://www.webpagetest.org/" target="_blank" rel="external">webpagetest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Google Page Speed Insights</a></p>
<p><a]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Rotate Array ]]></title>
    <link href="http://judastree.github.io/2015/07/23/LeetCode-Rotate-Array/"/>
    <id>http://judastree.github.io/2015/07/23/LeetCode-Rotate-Array/</id>
    <published>2015-07-23T03:12:43.000Z</published>
    <updated>2015-07-23T03:24:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">数组向右移K位</a></p>
<p> 有一个数组[1,2,3,4,5],向右移k位，k=3输出[3,4,5,1,2],k=1输出[5,1,2,3,4]</p>
<p> 要求时间复杂度线性，空间复杂度可控O(1)</p>
<h2 id="思路">思路</h2><p>找到每个元素移位后的位置，在新的数组上追一赋值。</p>
<pre><code>/**
 * @param {number[]} nums
 * @param {number} k
 * @<span class="keyword">return</span> {<span class="type">void</span>} <span class="type">Do</span> <span class="keyword">not</span> <span class="keyword">return</span> anything, modify nums <span class="keyword">in</span>-place instead.
 */
<span class="keyword">var</span> rotate = function(nums, k) {
      //步数是长度的倍数则直接返回
      <span class="keyword">if</span>(k%nums.length===<span class="number">0</span>){
        <span class="keyword">return</span>;
    }<span class="keyword">else</span>{
        //取模，拿到真正的步数，因为k可能大于length
        <span class="keyword">var</span> step = k%nums.length;
        <span class="keyword">var</span> <span class="literal">result</span> = [];
        <span class="literal">result</span>.length =nums.length;

        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++){
            //确定每个元素的新的位置
            <span class="literal">result</span>[(i+step)%nums.length] = nums[i]
        }
        //重新赋值
        <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;nums.length;i++){
            nums[i] = <span class="literal">result</span>[i];
        }

    }
};
</code></pre><p>PS：验证虽然通过了，但总感觉有点投机，因为我重新复制了一下这个数组。虽然只用了这一个额外变量，但从空间存储上还是O(n)的。</p>
<p><img src="/images/rotatearray.png" alt="RotateArray"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="external">数组向右移K位</a></p>
<p> 有一个数组[1,]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Maximum Depth of Binary Tree]]></title>
    <link href="http://judastree.github.io/2015/07/23/LeetCode-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://judastree.github.io/2015/07/23/LeetCode-Maximum-Depth-of-Binary-Tree/</id>
    <published>2015-07-23T02:37:29.000Z</published>
    <updated>2015-07-23T02:44:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">查找二叉树的最大深度</a></p>
<h2 id="思路">思路</h2><p>二叉树的最大深度，等于根节点的深度。根节点的深度等于左子树和右子树深度的较大者。</p>
<p>所以这个题可以递归遍历每一个节点的深度。</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */</span>
<span class="comment">/**
 * <span class="doctag">@param</span> {TreeNode} root
 * <span class="doctag">@return</span> {number}
 */</span>
<span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span><span class="params">(root)</span> </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">findDepth</span><span class="params">(node,currentDepth)</span></span>{
        <span class="keyword">if</span>(node!==<span class="keyword">null</span>){
            currentDepth++;
            <span class="comment">//每个节点的深度，等于左深度和右深度的较大者</span>
            <span class="keyword">var</span> leftDepth =  findDepth(node.left,currentDepth);
            <span class="keyword">var</span> rightDepth = findDepth(node.right,currentDepth);
            <span class="keyword">return</span> leftDepth&gt;rightDepth?leftDepth:rightDepth;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> currentDepth;
        }
    }
    <span class="comment">//返回根节点的深度</span>
    <span class="keyword">return</span> findDepth(root,<span class="number">0</span>);
};
</code></pre><p><img src="/images/maxdepth.png" alt="MaxDepth">        </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="external">查找二叉树的最大深度</a]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Plus One]]></title>
    <link href="http://judastree.github.io/2015/07/22/LeetCode-Plus-One/"/>
    <id>http://judastree.github.io/2015/07/22/LeetCode-Plus-One/</id>
    <published>2015-07-22T03:17:26.000Z</published>
    <updated>2015-07-22T03:27:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="external">Plus One</a></p>
<p>有一个数组代表一个非负的数字，求这个数字+1之后的数组。<br>比如这个数组是[1,2,3,4]它代表数字1234，那么这个数字加1之后是1235。希望得到这个数字代表的数组[1,2,3,5]</p>
<h2 id="思路">思路</h2><p>从最后一位开始，对当前值+1，如果当前值不为9则正常返回结果。如果当前值为9，则当前值变为0，再递归调用前一位的+1操作。</p>
<h2 id="实现">实现</h2><pre><code>/**
 * @param {<span class="keyword">number</span>[]} <span class="built_in">digits</span>
 * @<span class="keyword">return</span> {<span class="keyword">number</span>[]}
 */
var plusOne = <span class="function"><span class="keyword">function</span><span class="params">(digits)</span></span> {
    <span class="function"><span class="keyword">function</span></span> plus(<span class="built_in">digits</span>,i){
        <span class="keyword">if</span>(<span class="built_in">digits</span>[i]===<span class="number">9</span>){
            <span class="built_in">digits</span>[i]=<span class="number">0</span>;
            <span class="keyword">if</span>(i===<span class="number">0</span>){
                var head = [<span class="number">1</span>];
                <span class="keyword">return</span> head.concat(<span class="built_in">digits</span>);
            }<span class="keyword">else</span>{
                <span class="keyword">return</span> plus(<span class="built_in">digits</span>,i-<span class="number">1</span>);
            }

        }<span class="keyword">else</span>{
            <span class="built_in">digits</span>[i] = <span class="built_in">digits</span>[i]+<span class="number">1</span>;
            <span class="keyword">return</span> <span class="built_in">digits</span>;
        }

    }
    <span class="keyword">return</span> plus(<span class="built_in">digits</span>,<span class="built_in">digits</span>.length-<span class="number">1</span>);
};
</code></pre><p>PS：上面的代码性能不是很好，肯定有更好的算法的。</p>
<p> <img src="/images/plusone.png" alt="PlusOneRuntime">     </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="external">Plus One</a></p>
<p>有一个数组代表一个非负的数]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Single Number]]></title>
    <link href="http://judastree.github.io/2015/07/22/LeetCode-Single-Number/"/>
    <id>http://judastree.github.io/2015/07/22/LeetCode-Single-Number/</id>
    <published>2015-07-22T02:58:33.000Z</published>
    <updated>2015-07-22T03:14:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">找出落单的数字</a></p>
<p>有一个都是整型的数组，它除了一个元素只有出现一次之外，其他的都出现了二次。求这个落单的数字。</p>
<p>比如[1,2,3,5,2,1,3]这个数组中5是落单的数字，其他数字都出现了两次。</p>
<h2 id="思路">思路</h2><p>最先写的是两层for循环来比较是否有相等的。但是提交之后发现Time Limit Exceeded，时间复杂度是n^2。</p>
<p>题目有标注是线性的事件复杂度，而且空间复杂度也是线性级别的,所以递归调用也是不行的。</p>
<p>然后百度了下，发现有人用异或操作来判断。</p>
<pre><code><span class="tag">a</span> ^ <span class="tag">b</span> = <span class="tag">b</span> ^ <span class="tag">a</span>
<span class="tag">a</span> ^ <span class="tag">a</span> = <span class="number">0</span>
<span class="number">0</span> ^ <span class="tag">a</span> = <span class="tag">a</span>

<span class="tag">a</span> ^ <span class="tag">b</span> ^ <span class="tag">a</span> = <span class="tag">a</span> ^ <span class="tag">a</span> ^ <span class="tag">b</span> = <span class="number">0</span> ^ <span class="tag">b</span> = b
</code></pre><p> 这样就可以把这个b找出来了。</p>
<h2 id="实现">实现</h2><pre><code>/**
 * @param {number[]} nums
 * @<span class="keyword">return</span> {number}
 */
<span class="keyword">var</span> singleNumber = function(nums) {
    <span class="keyword">var</span> <span class="literal">result</span> = nums[<span class="number">0</span>];

    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length; i++){
        <span class="literal">result</span> = <span class="literal">result</span> ^ nums[i];
    }
    <span class="keyword">return</span> <span class="literal">result</span>;

}
</code></pre><p> <img src="/images/singlenumber.png" alt="SingleNumberRuntime">      </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">找出落单的数字</a></p>
<p>有一个都是整型的数]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Power of Two]]></title>
    <link href="http://judastree.github.io/2015/07/22/LeetCode-Power-of-Two/"/>
    <id>http://judastree.github.io/2015/07/22/LeetCode-Power-of-Two/</id>
    <published>2015-07-22T02:30:48.000Z</published>
    <updated>2015-07-22T02:46:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="external">给定一个数判断它是否为2的次方</a></p>
<p> 给你一个数字N，求判断它是否是2的次方。比如8是2的3次方，返回true，9不是2的次方，返回false。</p>
<h2 id="思路">思路</h2><p>  这个题目最初想到的是递归除以2。但考虑到2这个数字比较特殊，它的次方在计算机中的位存储也是很特殊的，所以可以试下位操作。</p>
<pre><code><span class="number">2</span> : <span class="number">10</span>
<span class="number">4</span> : <span class="number">100</span>
<span class="number">8</span> : <span class="number">1000</span>
<span class="number">16</span>: <span class="number">10000</span>
...
</code></pre><p>  2的X次方，其二进制是1后面跟X个0；而2的X次方减1的二进制都是1.</p>
<pre><code><span class="number">1</span> : <span class="number">1</span>
<span class="number">3</span> : <span class="number">11</span>
<span class="number">7</span> : <span class="number">111</span>
<span class="number">15</span>: <span class="number">1111</span>
...
</code></pre><p>  而2^x 和2^x-1 进行<strong>位与</strong>操作，结果是0.比如8和7</p>
<pre><code><span class="code">  1000</span>
<span class="header">&amp; 0111
-------</span>
<span class="code">  0000</span>
</code></pre><p>  那么我们就可以利用这一点来判断一个数是否为2的次方。     </p>
<h2 id="实现">实现</h2><pre><code><span class="comment">/**
 * <span class="doctag">@param</span> {number} n
 * <span class="doctag">@return</span> {boolean}
 */</span>
<span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>{

    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>){<span class="keyword">return</span> <span class="keyword">false</span>}

    <span class="keyword">return</span> (n&amp;n-<span class="number">1</span>)===<span class="number">0</span>
};
</code></pre><p><img src="/images/poweroftwo.png" alt="Runtime"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="external">给定一个数判断它是否为2的次方</a></p>
<p> ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome timeline 检测页面性能]]></title>
    <link href="http://judastree.github.io/2015/07/21/Chrome-timeline-%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD/"/>
    <id>http://judastree.github.io/2015/07/21/Chrome-timeline-检测页面性能/</id>
    <published>2015-07-21T04:13:58.000Z</published>
    <updated>2015-07-21T04:20:09.000Z</updated>
    <content type="html"><![CDATA[<p>还是先占个坑。</p>
<p>今天要做页面性能优化，终于有机会用到这个了。</p>
<p>参考资料:<a href="https://developer.chrome.com/devtools/docs/timeline" target="_blank" rel="external">Performance profiling with the timeline</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>还是先占个坑。</p>
<p>今天要做页面性能优化，终于有机会用到这个了。</p>
<p>参考资料:<a href="https://developer.chrome.com/devtools/docs/timeline" target="_blank" rel="exte]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉排序树的实现]]></title>
    <link href="http://judastree.github.io/2015/07/20/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://judastree.github.io/2015/07/20/二叉排序树的实现/</id>
    <published>2015-07-20T10:44:33.000Z</published>
    <updated>2015-07-20T10:49:33.000Z</updated>
    <content type="html"><![CDATA[<p>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；<br>（3）左、右子树也分别为二叉排序树；<br>（4）没有键值相等的节点。</p>
<pre><code><span class="comment">/**
 * Created by judastree on 15/7/20.
 * 二叉排序树
 */</span>


<span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value, left, right</span>) </span>{
    <span class="keyword">this</span>.value = value;
    <span class="keyword">this</span>.left = left;
    <span class="keyword">this</span>.right = right;
}
<span class="function"><span class="keyword">function</span> <span class="title">BST</span>(<span class="params"></span>) </span>{
    <span class="keyword">this</span>.root = <span class="literal">null</span>;
}
BST.prototype = {
    add: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>{
        <span class="keyword">var</span> n = <span class="keyword">new</span> Node(value, <span class="literal">null</span>, <span class="literal">null</span>);
        <span class="keyword">if</span> (<span class="keyword">this</span>.root == <span class="literal">null</span>) {
            <span class="comment">//根节点为空，直接插入</span>
            <span class="keyword">this</span>.root = n;
            <span class="keyword">return</span> <span class="literal">true</span>;
        } <span class="keyword">else</span> {
            <span class="comment">//根节点不为空，找到匹配的子节点插</span>
            <span class="keyword">var</span> current = <span class="keyword">this</span>.root;
            <span class="keyword">while</span> (<span class="literal">true</span>) {
                <span class="keyword">if</span> (value &lt; current.value) {
                    <span class="comment">//比当前节点小，而且当前节点没有左孩子，直接插入</span>
                    <span class="keyword">if</span> (current.left == <span class="literal">null</span>) {
                        current.left = n;
                        <span class="keyword">break</span>;
                    } <span class="keyword">else</span> {
                        <span class="comment">//当前节点有左孩子，往下遍历，再和左孩子比较</span>
                        current = current.left;
                    }
                } <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; current.value) {
                    <span class="comment">//大于当前节点，而且当前节点没有右孩子，直接插入</span>
                    <span class="keyword">if</span> (current.right == <span class="literal">null</span>) {
                        current.right = n;
                        <span class="keyword">break</span>;
                    } <span class="keyword">else</span> {
                        <span class="comment">//当前节点有右孩子，往下遍历，再和右孩子比较</span>
                        current = current.right;
                    }

                } <span class="keyword">else</span> {
                    <span class="comment">//等于的情况，忽略不进行插入</span>
                    <span class="keyword">break</span>;
                }
            }
        }

    },
    <span class="comment">//中序遍历</span>
    inOrder: <span class="function"><span class="keyword">function</span> (<span class="params">node, fn</span>) </span>{
        <span class="keyword">if</span> (node) {
            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) {
                <span class="keyword">this</span>.inOrder(node.left, fn);
            }
            fn.call(<span class="keyword">this</span>, node);

            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) {
                <span class="keyword">this</span>.inOrder(node.right, fn);
            }
        }
    },
    <span class="comment">//先序遍历</span>
    preOrder: <span class="function"><span class="keyword">function</span> (<span class="params">node, fn</span>) </span>{
        <span class="keyword">if</span> (node) {
            fn.call(<span class="keyword">this</span>, node);
            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) {
                <span class="keyword">this</span>.preOrder(node.left, fn);
            }
            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) {
                <span class="keyword">this</span>.preOrder(node.right, fn);
            }
        }
    },
    <span class="comment">//后序遍历</span>
    postOrder: <span class="function"><span class="keyword">function</span> (<span class="params">node, fn</span>) </span>{
        <span class="keyword">if</span> (node) {

            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) {
                <span class="keyword">this</span>.postOrder(node.left, fn);
            }
            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) {
                <span class="keyword">this</span>.postOrder(node.right, fn);
            }
            fn.call(<span class="keyword">this</span>, node);
        }
    },
    <span class="comment">//默认调用中序遍历</span>
    toArray: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> result = [];
        <span class="keyword">this</span>.inOrder(<span class="keyword">this</span>.root, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>{
            result.push(node.value);
        });
        <span class="keyword">return</span> result;
    },
    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">return</span> <span class="keyword">this</span>.toArray().toString();
    }
};

<span class="keyword">var</span> bst = <span class="keyword">new</span> BST();

bst.add(<span class="number">4</span>);
bst.add(<span class="number">8</span>);
bst.add(<span class="number">3</span>);
bst.add(<span class="number">7</span>);
bst.add(<span class="number">1</span>);
bst.add(<span class="number">2</span>);
<span class="built_in">console</span>.log(<span class="string">"中序遍历："</span>);
<span class="built_in">console</span>.log(bst.toString());
<span class="built_in">console</span>.log(<span class="string">"先序遍历"</span>);
<span class="keyword">var</span> preResults = [];
bst.preOrder(bst.root, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>{
    preResults.push(node.value);
});
<span class="built_in">console</span>.log(preResults.toString());
<span class="built_in">console</span>.log(<span class="string">"后序遍历"</span>);
<span class="keyword">var</span> postResults = [];
bst.postOrder(bst.root, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>{
    postResults.push(node.value);
});
<span class="built_in">console</span>.log(postResults.toString());
</code></pre><p>PS: 边参考别人的，写了一个小时。            </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；<br>（3）左、右子树也分别为二叉排序树；<br>（4）没有键值相等]]>
    </summary>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome和Chromium的区别]]></title>
    <link href="http://judastree.github.io/2015/07/20/Chrome%E5%92%8CChromium%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://judastree.github.io/2015/07/20/Chrome和Chromium的区别/</id>
    <published>2015-07-20T04:06:10.000Z</published>
    <updated>2015-07-20T07:00:53.000Z</updated>
    <content type="html"><![CDATA[<p>昨天下了QQ浏览器来用，查看关于发现QQ浏览器的内核是Chromium的。那个Chrome和Chromium是什么关系呢？</p>
<p>chromium是谷歌的开源项目，有很多开发者共同的去改进，谷歌收集改进后会发布安装包，也就是chromium，然后会将chromium的东西更新到chrome中，chrome不是开源项目，而在chrome内的更新也有一个过程，先更新到chrome的金丝雀版（未验证bug），接着到dev版（大问题已经验证），接着beta（小问题已经验证），都没问题了，再更新到稳定版。</p>
<p>Chrome浏览器各版本的特点：<br>1、Chromium<br>Chromium是Google为发展Chrome浏览器而启动的开源项目，Chromium相当于Chrome的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在Chromium上实现，待验证后才会应用在Chrome上，故Chrome的功能会相对落后但较稳定（实际上稳定性也差不多）；Chromium的更新速度很快，每隔数小时即有新的开发版本。<br>2、Chrome dev<br>基于最新的Chromium Build，经常每周就更新推出新功能；与Beta版十分相似，但稳定性较差，不适合公共使用。<br>3、Chrome beta<br>基于Chrome dev；按月更新；崩溃等重大故障较少发生，功能比dev更加完善。<br>4、Chrome stable</p>
<p>然后…然后我瞬间找到了我的QQ浏览器为什么一直崩溃he的原因了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天下了QQ浏览器来用，查看关于发现QQ浏览器的内核是Chromium的。那个Chrome和Chromium是什么关系呢？</p>
<p>chromium是谷歌的开源项目，有很多开发者共同的去改进，谷歌收集改进后会发布安装包，也就是chromium，然后会将chromium]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Path-Sum]]></title>
    <link href="http://judastree.github.io/2015/07/19/LeetCode:Path%20Sum/"/>
    <id>http://judastree.github.io/2015/07/19/LeetCode:Path Sum/</id>
    <published>2015-07-19T14:37:32.000Z</published>
    <updated>2015-07-22T02:33:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="external">指定和值的二叉树路径查找</a></p>
<p> 现在有一个二叉树，找出这个二叉树中是否有存在这样一条根到叶子的路径能使路径节点上的值加起来等于给定的值。<br> <em>比如</em>下面这个二叉树，给定的值是22，5-&gt;4-&gt;11-&gt;2 这条路径是满足条件的。</p>
<pre><code>      <span class="number">5</span>
     / <span class="string">\</span>
    <span class="number">4</span>   <span class="number">8</span>
   /   / <span class="string">\</span>
  <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span>
 /  <span class="string">\</span>      <span class="string">\</span>
<span class="number">7</span>    <span class="number">2</span>      <span class="number">1</span>
</code></pre><h2 id="思路">思路</h2><p> 这就是一个二叉树遍历，从根节点往下，每找到一个节点将节点的value和当前路径相加，判断是否和sum相等。</p>
<ul>
<li>如果相等，并且是叶子节点，则返回true，找到</li>
<li>如果不相等，相等但不是叶子节点，则继续查找，直到所有的节点都遍历过。</li>
</ul>
<h2 id="实现">实现</h2><pre><code><span class="keyword">var</span> checkNext =<span class="function"><span class="keyword">function</span><span class="params">(root, sum, currentSum,flag)</span></span>{
    <span class="keyword">if</span> (root) {

        <span class="keyword">if</span> (root.val + currentSum === sum) {
            <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) {
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">if</span>(root.left===<span class="literal">null</span>&amp;&amp;root.right===<span class="literal">null</span>){
            <span class="keyword">return</span> <span class="literal">false</span>;
        }

        <span class="keyword">if</span> (root.left !== <span class="literal">null</span>) {
            flag = checkNext(root.left, sum, root.val + currentSum,flag);
        }
        <span class="keyword">if</span>(flag){
            <span class="keyword">return</span> <span class="literal">true</span>;
        }
        <span class="keyword">if</span> (root.right !== <span class="literal">null</span>) {
            flag = checkNext(root.right, sum, root.val + currentSum,flag);
        }
        <span class="keyword">return</span> flag;


    } <span class="keyword">else</span> {
        <span class="keyword">return</span> <span class="literal">false</span>;
    }
}
<span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span> <span class="params">(root, sum)</span> </span>{

    <span class="keyword">if</span>(checkNext(root, sum, <span class="number">0</span>,<span class="literal">false</span>)){
        <span class="keyword">return</span> <span class="literal">true</span>
    }<span class="keyword">else</span>{
        <span class="keyword">return</span> <span class="literal">false</span>
    }
  };
</code></pre><p>PS:这是我在leetcode上做的第一个题，最初没有搞明白玩法，一直在自己实现二叉树，后面才发现原来二叉树已经写好，只要给遍历方法就好了。</p>
<p><img src="/images/pathsumruntime.png" alt="Runtime"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目来源">题目来源</h2><p> <a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="external">指定和值的二叉树路径查找</a></p>
<p> 现在有一个二叉]]>
    </summary>
    
      <category term="LeetCode" scheme="http://judastree.github.io/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[blink chromium webkit 是什么关系]]></title>
    <link href="http://judastree.github.io/2015/07/19/blink-chromium-webkit-%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/"/>
    <id>http://judastree.github.io/2015/07/19/blink-chromium-webkit-是什么关系/</id>
    <published>2015-07-19T14:06:01.000Z</published>
    <updated>2015-07-19T14:11:56.000Z</updated>
    <content type="html"><![CDATA[<p>转帖：<a href="http://blog.csdn.net/milado_nju/article/details/8805810" target="_blank" rel="external">原文</a></p>
<p>Google退出WebKit项目，创建自己的渲染引擎Blink。这其实不能说完全没有先兆，合合分分，纯属正常。</p>
<p>其实，之前关于WebKit2，双方的争论就非常的大。Apple希望它可以随便加入和删除代码而无需担心它会破坏其它Ports的代码，这遭到很多人的反对和不满。</p>
<p>同时，另一方面，Google有很多新的功能希望加入WebKit中，但是WebKit可能并不认可他们。双方分歧越来越多，终于分道扬镳。</p>
<p>这里面有个误区，就是Google的Blink是一个全新的引擎。其实不是这样，Blink目前就是从WebKit直接复制出一个版本出来，然后将与chromium无关的Ports全部移除掉，将代码结构重新整理，就目前而言，Blink的渲染和WebKit是一样，但是，以后两者将各自走不同的路。这有点类似于之前WebKit从KHTML中复制出来一样，历史总是惊人的相似。</p>
<p>目前参与Blink和Chromium大致一样，拥有Chromium的commit权限对Blink也适用。原来一些WebKit的committer和reviewer也开始成为blink的committer。它的提交代码流程，review流程等都是chromium的风格，这对chromium的开发者来说非常熟悉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转帖：<a href="http://blog.csdn.net/milado_nju/article/details/8805810" target="_blank" rel="external">原文</a></p>
<p>Google退出WebKit项目，创建自己的渲]]>
    </summary>
    
      <category term="工具" scheme="http://judastree.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[node下如何调试]]></title>
    <link href="http://judastree.github.io/2015/07/19/node%E4%B8%8B%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/"/>
    <id>http://judastree.github.io/2015/07/19/node下如何调试/</id>
    <published>2015-07-18T16:14:39.000Z</published>
    <updated>2015-07-19T13:31:15.000Z</updated>
    <content type="html"><![CDATA[<p>目前遇到的场景，直接在webstorm上打断点，然后shift+ctrl+D, 就可以调试了。</p>
<p>后面遇到更复杂的场景再继续研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>目前遇到的场景，直接在webstorm上打断点，然后shift+ctrl+D, 就可以调试了。</p>
<p>后面遇到更复杂的场景再继续研究。</p>
]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[求一个集合的所有子集]]></title>
    <link href="http://judastree.github.io/2015/07/18/%E6%B1%82%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E9%9B%86/"/>
    <id>http://judastree.github.io/2015/07/18/求一个集合的所有子集/</id>
    <published>2015-07-18T03:35:17.000Z</published>
    <updated>2015-07-18T03:41:40.000Z</updated>
    <content type="html"><![CDATA[<p>给定一个集合，求出它的所有子集。例如给[1,2,3], 那么输出应该是[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3].</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给定一个集合，求出它的所有子集。例如给[1,2,3], 那么输出应该是[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3].</p>
]]>
    </summary>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs入门文章读后感]]></title>
    <link href="http://judastree.github.io/2015/07/17/nodejs%E5%85%A5%E9%97%A8%E6%96%87%E7%AB%A0%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://judastree.github.io/2015/07/17/nodejs入门文章读后感/</id>
    <published>2015-07-17T02:38:43.000Z</published>
    <updated>2015-07-17T03:10:39.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></p>
<p>很久前就把它加入了手机的书签栏，然后陆陆续续利用吃饭排队的事件看完的。</p>
<p>文章是翻译的，写得很清晰易懂，node细节的我就不说了，因为也不是完全懂，就谈谈读后感。</p>
<p>nodejs很早就听过，也很早就去看过一些介绍的文章、入门的文章，快速搭建的文章，在JS权威指南里也有关于nodejs的介绍。</p>
<p>为什么这次看的这篇文章和以前看的感觉就不一样呢？</p>
<p>我仔细地想了下。</p>
<p><strong>因为那时我还不知道JS是单线程的，是基于事件驱动的</strong></p>
<p>没有这样的一层基础去看node(注意是【看】 不是【学习】)，根本理解不了，只能是别人说什么是什么，然后转天就忘了。</p>
<p><strong>在学习的路上，我们看了很多东西。</strong></p>
<p>有些让你豁然开朗，有些让你越看越迷糊。豁然开朗的就很有兴趣地看下去，越看越迷糊的就被搁浅了，而搁浅的时间以年为单位。</p>
<p>看完文章，我想到之前ES6中的一个generator概念还是不清楚，或许现在可以更好地理解了。</p>
<ul>
<li>事件轮询</li>
<li>非阻塞的实现机制</li>
<li>generator</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></p>
<p>很久前就把它加入了手机的书签栏，然后陆陆续续利用吃饭排队的事件看完]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[冥王星为什么有个心呢？]]></title>
    <link href="http://judastree.github.io/2015/07/16/%E5%86%A5%E7%8E%8B%E6%98%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%B8%AA%E5%BF%83%E5%91%A2%EF%BC%9F/"/>
    <id>http://judastree.github.io/2015/07/16/冥王星为什么有个心呢？/</id>
    <published>2015-07-16T10:54:42.000Z</published>
    <updated>2015-07-16T11:31:36.000Z</updated>
    <content type="html"><![CDATA[<p>晚饭后散步，bf一心在看手机刷微博。</p>
<p>我趴在扶栏上，看飞机慢慢降落。我问bf:”为什么冥王星有个心呢？”</p>
<p>bf果断答：“没有心。”</p>
<p>“有心。”我继续问，“为什么冥王星有个心呢？”</p>
<p>“没有心。”</p>
<p>“照片都出来了，怎么没有？可为什么冥王星有个心呢？”</p>
<p>bf还是很确定：“没有心。”</p>
<p>“为什么冥王星有个心呢？”</p>
<p>“没有心。”</p>
<p>“为什么冥王星有个心呢？”</p>
<p>“没有心。”</p>
<p>“为什么冥王星有个心呢？”</p>
<p>“没有心。”</p>
<p>…..</p>
<p>如此重复了很多遍之后，我终于忍不了了:”为什么明明有心你要说没心！”</p>
<p>然后bf也忍不住笑场了：“否定掉冥王星有心就不会继续追问,反正你一直问一直问也不是真正想要知道。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>晚饭后散步，bf一心在看手机刷微博。</p>
<p>我趴在扶栏上，看飞机慢慢降落。我问bf:”为什么冥王星有个心呢？”</p>
<p>bf果断答：“没有心。”</p>
<p>“有心。”我继续问，“为什么冥王星有个心呢？”</p>
<p>“没有心。”</p>
<p>“照片都出]]>
    </summary>
    
      <category term="日常" scheme="http://judastree.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[backbone的事件机制]]></title>
    <link href="http://judastree.github.io/2015/07/16/backbone%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://judastree.github.io/2015/07/16/backbone的事件机制/</id>
    <published>2015-07-16T03:54:57.000Z</published>
    <updated>2015-07-16T03:56:06.000Z</updated>
    <content type="html"><![CDATA[<p>因为最近在做事件绑定的时候总是出现一些问题，看来有必要去研究下了。<br>先占个坑，以后再填。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为最近在做事件绑定的时候总是出现一些问题，看来有必要去研究下了。<br>先占个坑，以后再填。</p>
]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习下ES6]]></title>
    <link href="http://judastree.github.io/2015/07/15/%E5%AD%A6%E4%B9%A0%E4%B8%8BES6/"/>
    <id>http://judastree.github.io/2015/07/15/学习下ES6/</id>
    <published>2015-07-15T03:26:29.000Z</published>
    <updated>2015-07-15T05:49:23.000Z</updated>
    <content type="html"><![CDATA[<p>主要是看阮一峰的<a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">入门教程</a><br>还有csdn上的<a href="http://www.csdn.net/tag/%E6%8E%A2%E7%A7%98es6/news" target="_blank" rel="external">探秘ES6</a><br>github上的<a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">es6 feature</a></p>
<p>说起来好惭愧，一直都没有去了解ECMAScript,枉做前端。</p>
<p>ES6有哪些酷炫的新特性呢？</p>
<h2 id="新增箭头操作符=&gt;_,简化函数书写">新增箭头操作符=&gt; ,简化函数书写</h2><p> coffeescript的语法糖里也是有样，各种回调需要写function,现在用=&gt; 代替function关键字</p>
<h2 id="新增基本类型">新增基本类型</h2><p> JS有null,undefined,boolean,number,string五种基本类型，object是引用类型。<br> 现在新增Symbol这个基本类型，避免与已有代码命名冲突</p>
<pre><code><span class="keyword">var</span> key = <span class="built_in">Symbol</span>(<span class="string">"key"</span>);
</code></pre><h2 id="自带Promise">自带Promise</h2><p> 现在已经很多js的类库都支持Promise了，比如Jquery。ES6正式引入，提供原生的Promise对象。</p>
<h2 id="新增块级变量的定义_关键字let">新增块级变量的定义 关键字let</h2><p> JS是变量var定义是不存在块级生命周期的。现在新增let关键字，仅可以在块级中使用。</p>
<pre><code><span class="keyword">for</span><span class="params">(let i = <span class="number">0</span>; i &lt; arr.length; i++)</span>{}

console.<span class="built_in">log</span><span class="params">(i)</span>
<span class="comment">//ReferenceError: i is not defined</span>
</code></pre><h2 id="变量的解构赋值">变量的解构赋值</h2><p> 自动解析数组或对象中的值，并给对应变量进行赋值，这被称为解构（Destructuring）。</p>
<pre><code><span class="keyword">var</span> [x,y]=getVal(),<span class="comment">//函数返回值的解构</span>
    [name,,age]=[<span class="string">'wayou'</span>,<span class="string">'male'</span>,<span class="string">'secrect'</span>];<span class="comment">//数组解构</span>

<span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params"></span>) </span>{
    <span class="keyword">return</span> [ <span class="number">1</span>, <span class="number">2</span> ];
}

<span class="built_in">console</span>.log(<span class="string">'x:'</span>+x+<span class="string">', y:'</span>+y);<span class="comment">//输出：x:1, y:2 </span>
<span class="built_in">console</span>.log(<span class="string">'name:'</span>+name+<span class="string">', age:'</span>+age);<span class="comment">//输出： name:wayou, age:secrect</span>
</code></pre><p> 据说在函数传参中很有用。<br> 如果函数的参数列表很长，又不想记住他们的顺序，我们对参数对象使用解构赋值，这样，在访问对象属性时，便可以避免重复调用这一参数对象    </p>
<h2 id="for_of_的遍历">for of 的遍历</h2><p>   我们以前用for in 遍历数组，但拿到的是数组的索引值，这点很烦。for of 拿到的值不是索引，完全没有这个烦恼。</p>
<pre><code><span class="keyword">for</span> (var <span class="built_in">value</span> <span class="operator">of</span> myArray) { 
    console.<span class="built_in">log</span>(<span class="built_in">value</span>); 
}
</code></pre><p>   另外，我们以前也用forEach遍历数组，for(var i of array){} 和forEach(function(i){})比起来，优势在于还可以有break,continue,return这些操作。</p>
<h2 id="Generator函数">Generator函数</h2><p>  没有看明白这是干什么，mark下</p>
<h2 id="引入模块化_Module">引入模块化 Module</h2><p>  模块功能主要由两个命令构成：export和import。<br>  export命令用于用户自定义模块，规定对外接口；<br>  import命令用于输入其他模块提供的功能，同时创造命名空间（namespace），防止函数名冲突。<br>  这个对于代码管理很有用啊。越来越像java了…</p>
<h2 id="还有一些其他的新增api，新增的map和set集合等等，到时再看了。">还有一些其他的新增api，新增的map和set集合等等，到时再看了。</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>主要是看阮一峰的<a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">入门教程</a><br>还有csdn上的<a href="http://www.csdn.net/t]]>
    </summary>
    
      <category term="JavaScript" scheme="http://judastree.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速排序算法]]></title>
    <link href="http://judastree.github.io/2015/07/15/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://judastree.github.io/2015/07/15/快速排序算法/</id>
    <published>2015-07-15T03:15:22.000Z</published>
    <updated>2015-07-18T03:18:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概念">概念</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小。<br>然后再按此方法对这两部分数据分别进行快速排序，以此达到整个数据变成有序序列。</p>
<h2 id="思路">思路</h2><p>一趟快速排序的算法是：<br>1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；<br>2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；<br>3）从j开始向前搜索，即由后开始向前搜索(j—)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；<br>4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；<br>5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</p>
<h2 id="时间复杂度">时间复杂度</h2><p>假设其数组长度为n，其算法复杂度为o（nlog（n））</p>
<h2 id="实现">实现</h2><pre><code><span class="comment">//var array = [3, 8, 1, 9, 0, 6, 5, 2, 4, 7];</span>
<span class="keyword">var</span> <span class="keyword">array</span> = [<span class="number">111</span>,<span class="number">34</span>,<span class="number">231</span>,<span class="number">89</span>,<span class="number">22</span>,<span class="number">90</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">45</span>,<span class="number">222</span>,<span class="number">55</span>,<span class="number">2456</span>,<span class="number">34</span>,<span class="number">33</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">55</span>,<span class="number">1234</span>,<span class="number">67</span>,<span class="number">3</span>,<span class="number">80</span>,<span class="number">46</span>,<span class="number">37</span>,<span class="number">48</span>,<span class="number">24</span>,<span class="number">16</span>];
  console.log(<span class="keyword">array</span>.toString());

<span class="function"><span class="keyword">function</span> <span class="title">quickSort</span><span class="params">(array)</span> </span>{
    <span class="keyword">var</span> count = <span class="number">0</span>;


    <span class="function"><span class="keyword">function</span> <span class="title">sortPartial</span><span class="params">(front, back)</span> </span>{

        <span class="keyword">var</span> key = <span class="keyword">array</span>[front], i = front, j = back;
        <span class="keyword">if</span>(j-i&gt;=<span class="number">1</span>){

            <span class="keyword">while</span> ( i &lt; j) {
                <span class="comment">//从后往前遍历，找到第一个比key小的替换位置。</span>
                <span class="keyword">for</span> (; j &gt;i; j--) {

                    <span class="keyword">if</span> (<span class="keyword">array</span>[j] &lt; key) {
                        <span class="keyword">array</span>[i] = <span class="keyword">array</span>[j];
                        <span class="keyword">array</span>[j] = key;
                        console.log(<span class="keyword">array</span>.toString());
                        <span class="keyword">break</span>;
                    }
                }
                <span class="comment">//从前往后遍历，找到第一个比key大的替换位置</span>
                <span class="keyword">for</span> (; i &lt; j; i++) {
                    count++;
                    <span class="keyword">if</span> (<span class="keyword">array</span>[i] &gt; key) {
                        <span class="keyword">array</span>[j] = <span class="keyword">array</span>[i];
                        <span class="keyword">array</span>[i] = key;
                        console.log(<span class="keyword">array</span>.toString());
                        <span class="keyword">break</span>;
                    }
                }
            }

            <span class="comment">//当前key的位置确定，开始递归key前半部分，和key后半部分。</span>
             sortPartial(front, i-<span class="number">1</span>);
             sortPartial(j+<span class="number">1</span>, back);
        }

    }

    sortPartial(<span class="number">0</span>, <span class="keyword">array</span>.length - <span class="number">1</span>);
    <span class="keyword">return</span> <span class="keyword">array</span>;

}

console.log(quickSort(<span class="keyword">array</span>).toString());
</code></pre><p>PS: 写了一个小时。。。也真是醉了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概念">概念</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小。<br>然后再按此方法对这两部分数据分别进行快速排序，以此达到整个数据变成有序序列。</p>
<h2 id="思路">思路</h2><p>]]>
    </summary>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二分查找算法]]></title>
    <link href="http://judastree.github.io/2015/07/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>http://judastree.github.io/2015/07/15/二分查找算法/</id>
    <published>2015-07-15T03:15:06.000Z</published>
    <updated>2015-07-18T03:17:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概念">概念</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；<br>其缺点是要求待查表为有序表，且插入删除困难。<br>因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>
<h2 id="思路">思路</h2><p>将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；<br>否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。<br>重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>
<h2 id="时间复杂度">时间复杂度</h2><p>假设其数组长度为n，其算法复杂度为o（log（n））</p>
<h2 id="Javascript实现">Javascript实现</h2><pre><code><span class="keyword">var</span> <span class="type">Arr</span>=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>];
function binary(<span class="built_in">find</span>,arr,low,high){
    <span class="keyword">if</span>(low&lt;=high){
        <span class="keyword">if</span>(arr[low]==<span class="built_in">find</span>) <span class="keyword">return</span> low;
        <span class="keyword">if</span>(arr[high]==<span class="built_in">find</span>) <span class="keyword">return</span> high;

        <span class="keyword">var</span> mid=<span class="type">Math</span>.ceil((high+low)/<span class="number">2</span>);

        <span class="keyword">if</span>(arr[mid]==<span class="built_in">find</span>){
            <span class="keyword">return</span> mid;
        }<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&gt;<span class="built_in">find</span>){
            <span class="keyword">return</span> binary(<span class="built_in">find</span>,arr,low,mid-<span class="number">1</span>);
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> binary(<span class="built_in">find</span>,arr,mid+<span class="number">1</span>,high);
        }
    }
    <span class="keyword">return</span> -<span class="number">1</span>;
}
binary(<span class="number">15</span>,<span class="type">Arr</span>,<span class="number">0</span>,<span class="type">Arr</span>.length-<span class="number">1</span>);
</code></pre><p>PS: 写了半个小时…</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概念">概念</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；<br>其缺点是要求待查表为有序表，且插入删除困难。<br>因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>
<h2 id="思路">思路</h2><p>将]]>
    </summary>
    
      <category term="算法" scheme="http://judastree.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端自动化测试探索]]></title>
    <link href="http://judastree.github.io/2015/07/15/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8E%A2%E7%B4%A2/"/>
    <id>http://judastree.github.io/2015/07/15/前端自动化测试探索/</id>
    <published>2015-07-15T03:13:10.000Z</published>
    <updated>2015-07-15T03:13:49.000Z</updated>
    <content type="html"><![CDATA[<p>先挖个坑，以后慢慢填。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先挖个坑，以后慢慢填。</p>
]]>
    </summary>
    
  </entry>
  
</feed>